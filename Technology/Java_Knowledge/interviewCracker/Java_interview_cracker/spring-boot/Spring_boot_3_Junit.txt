Spring boot testing Junit:
==================

Testing
Spring Boot provides a number of utilities and annotations to help when testing your application. Test support is provided by two modules: spring-boot-test contains core items, and spring-boot-test-autoconfigure supports auto-configuration for tests.

Most developers use the spring-boot-starter-test “Starter”, which imports both Spring Boot test modules as well as JUnit Jupiter, AssertJ, Hamcrest, and a number of other useful libraries.

If you have tests that use JUnit 4, JUnit 5’s vintage engine can be used to run them. To use the vintage engine, add a dependency on junit-vintage-engine, as shown in the following example:

<dependency>
    <groupId>org.junit.vintage</groupId>
    <artifactId>junit-vintage-engine</artifactId>
    <scope>test</scope>
    <exclusions>
        <exclusion>
            <groupId>org.hamcrest</groupId>
            <artifactId>hamcrest-core</artifactId>
        </exclusion>
    </exclusions>
</dependency>

hamcrest-core is excluded in favor of org.hamcrest:hamcrest that is part of spring-boot-starter-test.


Test Scope Dependencies
=======================
The spring-boot-starter-test “Starter” (in the test scope) contains the following provided libraries:

	JUnit 5: The de-facto standard for unit testing Java applications.
	Spring Test & Spring Boot Test: Utilities and integration test support for Spring Boot applications.
	AssertJ: A fluent assertion library.
	Hamcrest: A library of matcher objects (also known as constraints or predicates).
	Mockito: A Java mocking framework.
	JSONassert: An assertion library for JSON.
	JsonPath: XPath for JSON.

 We generally find these common libraries to be useful when writing tests. If these libraries do not suit your needs, you can add additional test dependencies of your own.