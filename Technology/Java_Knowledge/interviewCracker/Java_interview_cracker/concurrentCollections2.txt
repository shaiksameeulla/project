Java Util.Concurrency collections:
-----------------------------------

public interface BlockingQueue<E>
extends Queue<E>

All Known Implementing Classes:
ArrayBlockingQueue, DelayQueue, LinkedBlockingDeque, LinkedBlockingQueue, LinkedTransferQueue, PriorityBlockingQueue, SynchronousQueue


A Queue that additionally supports operations that wait for the queue to become non-empty when retrieving an element, and wait for space to become available in the queue when storing an element.
BlockingQueue methods come in four forms, with different ways of handling operations that cannot be satisfied immediately, but may be satisfied at some point in the future: one throws an exception, the second returns a special value (either null or false, depending on the operation), the third blocks the current thread indefinitely until the operation can succeed, and the fourth blocks for only a given maximum time limit before giving up. These methods are summarized in the following table:

ArrayBlockingQueue:
-----------------
ArrayBlockingQueue is a bounded BlockingQueue backed by an array. This queue orders elements in FIFO (first-in-first-out). The head of the queue is the element which has been on the queue for the longest time. The tail of the queue is that element that has been on the queue for the shortest time. New elements are added at the tail of the queue, and the queue retrieval operations remove elements from the head of the queue.

ArrayBlockingQueue is the classic example of a "bounded buffer". A fixed-sized array is the backing data structure for ArrayBlockingQueue. We need to pass the capacity of ArrayBlockingQueue while creating the object. Once created, the capacity cannot be changed. Remember array is a fixed size data structure that can not be altered once created. Attempts to put an element into a full queue will result in the operation blocking; attempts to take an element from an empty queue will similarly block.

Following are the ways to adding elements to an ArrayBlockingQueue :

We can add an element in an ArrayBlockingQueue by add () or offer() method. offer() inserts the specified element into this queue if it is possible to do so immediately without violating capacity restrictions, returning true upon success and false if no space is currently available. Where as add() throws an exception if it is not able to add the element in the queue due to capacity restrictions. When using a capacity-restricted queue, offer() method is generally preferable to add, which can fail to insert an element only by throwing an exception.

BlockingQueue<String> blockingQueue1 = new ArrayBlockingQueue<>(5);
BlockingQueue<String> blockingQueue2 = new ArrayBlockingQueue<>(5);

Following are the ways to removing elements from an ArrayBlockingQueue :

We can remove an element from an ArrayBlockingQueue by poll () or remove() method. poll() retrieves and removes the head of the queue and returns null when the queue is empty where as remove() also retrieves and removes the head of the queue but throws an exception if this queue is empty.

LinkedBlockingQueue :
-----------------------
The LinkedBlockingQueue class implements the BlockingQueue interface. Read the BlockingQueue for more information about the interface. The LinkedBlockingQueue is an optionally-bounded blocking queue based on linked nodes. This queue orders elements FIFO (first-in-first-out). The head of the queue is the element that has been on the queue for the longest period of time. The tail of the queue is the element that has been on the queue for the shortest period of time. New elements are inserted at the tail of the queue, and the queue retrieval operations obtain elements at the head of the queue. Linked queues typically have higher throughput than array-based queues but less predictable performance in most concurrent applications.

The LinkedBlockingQueue keeps the elements internally in a linked structure (linked nodes). This linked structure can optionally have an upper bound if desired. If no upper bound is specified, Integer.MAX_VALUE is used as the upper bound. Linked nodes are dynamically created upon each insertion unless this would bring the queue above capacity. This class and its iterator implement all of the optional methods of the Collection and Iterator interfaces.

Following are some important methods and their behaviour for a LinkedBlockingQueue :

a. offer(E e) : It inserts the element at the tail of queue without exceeding LinkedBlockingQueue size. On success it returns true otherwise false.
b. put(E e) : Inserts the element at the tail of the queue and waits for space if necessary.
c. peek() : It retrieves the head of the queue without deleting it and returns null if empty.
d. poll() : It retrieves and removes the head of the queue and returns null if empty.
e. remove(Object o) : Removes the specified element from the queue.
f. take() : Retrieves and removes the head of the queue and waits if necessary.


ArrayBlockingQueue  Vs LinkedBlockingQueue:
----------------------------------------

1 . LinkedBlockingQueue: This is a LinkedList Implementation but Not Exactly JDK Implementation of LinkedList It uses static inner class Node to maintain Links between elements. Check the following Constructor for LinkedBlockingQueue.

public LinkedBlockingQueue(int capacity)
{
  if (capacity < = 0) throw new IllegalArgumentException();
  this.capacity = capacity;
  // Maintains a underlying linkedlist. ( Use when size is not known )
  last = head = new Node< E >(null);   
}
The following static inner class Node Used to Maintain Links

static class Node<E> {
    E item;
    Node<E> next;
    Node(E x) { item = x; }
}
2. ArrayBlockingQueue: ArrayBlockingQueue is implemented using a backing array. Constructor for ArrayBlockingQueue

public ArrayBlockingQueue(int capacity, boolean fair)
{
    if (capacity < = 0)
        throw new IllegalArgumentException();
    this.items = new Object[capacity]; // Maintains a underlying array
    lock = new ReentrantLock(fair);
    notEmpty = lock.newCondition();
    notFull =  lock.newCondition();
}
The Biggest Difference between ArrayBlockingQueue and LinkedBlockingQueue is clear from constructor one has underlying data structure Array and other linkedList. LinkedBlockingQueue has a putLock and a takeLock for insertion and removal respectively but ArrayBlockingQueue uses only 1 lock. ArrayBlockingQueue uses single-lock double condition algorithm and LinkedBlockingQueue is variant of the "two lock queue" algorithm and it has 2 locks 2 conditions ( takeLock , putLock).

Two Lock Queue algorithm is being used by LinkedBlockingQueue Implementation.Thus LinkedBlockingQueue's take and put can work concurrently, but this is not the case with ArrayBlockingQueue. The reason for using a single lock in ArrayBlockingQueue is ,ArrayBlockingQueue has to avoid overwriting entries so that it needs to know where the start and the end is. A LinkedBlockQueue doesn't need to know this as it lets the GC worry about cleaning up Nodes in the queue.

 

