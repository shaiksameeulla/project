what are the features of React?

   Advantages of React JS
		React JS offers many excellent front-end benefits to users and developers. Here are some of the prime advantages of React JS you can leverage:

		React offers an easy debugging process. The code is reusable.
		It’s easy to learn because of its easy and simple design.
		It allows developers to migrate an app in React very easily.
		It supports both Android and iOS platforms.
		ReactJS is view-oriented.
		It has faster updates with both server-side and front-end support.
		It supports a React Native library that offers efficient performance.

Virtual DOM?

	React uses V-DOM which is an API programming cross-platform interface that helps in enhancing the performance of the project. When developers build applications with several data changes and user interactions, it becomes important to conduct testing. This test helps you in knowing the app structure and how it will affect the speed of your project.

	In spite of quick JavaScript engines and client platforms, extensive DOM operation can impact the operating speed of the platform. This negatively impacts the user experience by making it uncomfortable. Here, React addresses this issue by using V-DOM. Instead of writing to the DOM while building its components, the responding virtual components transform into DOM. This process churns out a more fast-performing and seamless platform

is React or anugular fast ?

		What does Angular have over React?
			MVC Model
			Dependency Injection
			Out-of-the-box Full Stack Framework
			Two-way Data Binding
			Amazing App Structure
	anuglar uses Real DOM but react uses VDom
	
	
	Performance
		Since Virtual DOM trees are built on the server and are quite lightweight, React looks to exceed Angular in terms of runtime performance. Furthermore, the data-binding process in React is unidirectional, which means that bindings are not allocated watchers, reducing workload.

		With Angular, this is not the case. Since it uses a bidirectional data binding process, each binding requires a watcher to monitor changes, and each loop continues until all watchers (and their values) have been confirmed. As a result, the bidirectional data binding process may harm Angular's performance. However, this may change with the inclusion and enhancement of new technology Ivy to Angular.

what/why is oneway data binding ?

		as far as I understand this concept the difference is next: In two way data binding: changing data changes view and vice versa — updating input inside view updates data. In on way data flow: updating data updates view but updating input in view will not update data unless programmer do it explicitly by attaching listener to input which will update data. Hope that will make it a bit more clear for you.

what is Babel?

virtual dom vs real DOM?

is React framework or lib>

what is ES6 ?

what are thing needed to develop Component?

  class component and functional component , higher order component

Nodejs?

Controlled Component vs unControlled Component?
First of all know that Controlled Components are those whoose changes are handled by React application and Un-Controlled are those whoose is handled by DOM itself. Now, your state has 2 values in it. 


Prop Drilling?
	Prop drilling occurs when a parent component passes data down to its children and then those children pass the same data down to their own children. This process can continue indefinitely. At the end, it's a long chain of component dependencies that can be difficult to manage and maintain.

usestate?

custom component?

React Strict mode?
<StrictMode> lets you find common bugs in your components early during development.

<StrictMode>
  <App />
</StrictMode>

StrictMode is a tool for highlighting potential problems in an application. Like Fragment, StrictMode does not render any visible UI. It activates additional checks and warnings for its descendants.
	Strict mode checks are run in development mode only; they do not impact the production build.

StrictMode currently helps with:

		Identifying components with unsafe lifecycles
		Warning about legacy string ref API usage
		Warning about deprecated findDOMNode usage
		Detecting unexpected side effects
		Detecting legacy context API
		Ensuring reusable state


how to pass data b/w component?


React Router?


joins?