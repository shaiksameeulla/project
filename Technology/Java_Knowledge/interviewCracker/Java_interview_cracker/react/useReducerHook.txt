UseReducer:
it's an replacement to useState() if you want need to use more powerful state management
if you have state update that depend on other state, if you use setState there can be issues 

useReducer is very similar to useState, but it lets you move the state update logic from event handlers into a single function outside of your component.

you can use useReducer : 

const[state,dispathFn]=useReducer(reducerfn,initialState,initiaFn);

reducer: The reducer function that specifies how the state gets updated. It must be pure, should take the state and action as arguments, and should return the next state. State and action can be of any types.
initialArg: The value from which the initial state is calculated. It can be a value of any type. How the initial state is calculated from it depends on the next init argument.
optional init: The initializer function that should return the initial state. If it’s not specified, the initial state is set to initialArg. Otherwise, the initial state is set to the result of calling init(initialArg).
The init() function is executed exactly only one time when the useReducer is first called.



example:
----------

import { useReducer } from 'react';

function reducer(state, action) {
  switch (action.type) {
    case 'incremented_age': {
      return {
        name: state.name,
        age: state.age + 1
      };
    }
    case 'changed_name': {
      return {
        name: action.nextName,
        age: state.age
      };
    }
  }
  throw Error('Unknown action: ' + action.type);
}

function Form() {
  const [state, dispatch] = useReducer(reducer, { name: 'Taylor', age: 42 });
  
  function handleButtonClick() {
    dispatch({ type: 'incremented_age' }); // calling reducer
  }

  function handleInputChange(e) {
    dispatch({
      type: 'changed_name',
      nextName: e.target.value
    });
  }
  
  
  useReducer returns an array with exactly two items:

	The current state of this state variable, initially set to the initial state you provided.
	The dispatch function that lets you change it in response to interaction.
	To update what’s on the screen, call dispatch with an object representing what the user did, called an action:

function handleClick() {
  dispatch({ type: 'incremented_age' });
}