
React interview:
---------------
Filter  vs Map: ? code

var colours=[1,2,3,4,5,6,7,8,9,10];
console.log(colours);
var odd=colours.filter(el=>el%2!=0);
console.log(odd);
var multiplier=colours.map(el=>el*2);
console.log("multiplier",multiplier);


console.log("hi")
setTimeout(()=>{console.log("How are you")},0);

console.log("bye")
=====

console.log(a)
console.log(b)
var a=10;
let b=20;

Slice vs Splice

	splice() changes the original array whereas slice() doesn't but both of them returns array object.

	See the examples below:

	var array=[1,2,3,4,5];
	console.log(array.splice(2));
	This will return [3,4,5]. The original array is affected resulting in array being [1,2].

	var array=[1,2,3,4,5]
	console.log(array.slice(2));
	This will return [3,4,5]. The original array is NOT affected with resulting in array being [1,2,3,4,5].

	Below is simple fiddle which confirms this:

	//splice
	var array=[1,2,3,4,5];
		console.log(array.splice(2));

		//slice
		var array2=[1,2,3,4,5]
		console.log(array2.slice(2));


		console.log("----after-----");
		console.log(array);
		console.log(array2);

=============
Array Reduce :
The reduce() method executes a user-supplied "reducer" callback function on each element of the array, in order, passing in the return value from the calculation on the preceding element. The final result of running the reducer across all elements of the array is a single value.

The first time that the callback is run there is no "return value of the previous calculation". If supplied, an initial value may be used in its place. Otherwise the array element at index 0 is used as the initial value and iteration starts from the next element (index 1 instead of index 0).

	const array1 = [1, 2, 3, 4];

	// 0 + 1 + 2 + 3 + 4
	const initialValue = 0;
	const sumWithInitial = array1.reduce(
	  (accumulator, currentValue) => accumulator + currentValue,
	  initialValue
	);

	console.log(sumWithInitial);
	// Expected output: 10



const str="Helllo  How are you?";
o/p: Hello Saket How are you?

let result  = str.replace("Hello","Hello Saket");

React:
Functional Components

details on useEffect:

details on useMemo and useCallback