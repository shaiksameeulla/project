Regular Expression :

Pattern :
     A compiled representation of a regular expression.A regular expression, specified as a string, must first be compiled into
  an instance of this class.
Matcher :
   An engine that performs match operations on a  character sequence by interpreting a  Pattern.
   
   methods : 
   m.find() : find pattern
   m.start() : first index of the matching pattern
   m.end () : last index+1 of the matching patten
   m.group() :Returns the input subsequence matched by the previous match  

  EX : Pattern p = Pattern.compile("[^abc]");
		Matcher m= p.matcher("ababa*783936_@#$%^&*(");
		
		while(m.find()){
			System.out.println("index["+m.start() +"]<-----> group"+m.group());
		}

Regular Expression :
------------------
if you sepecify string directly as Pattern.compile("ab") : it matches exact characters.

[abc] -- a or b or c matches
[^abc] --> except a or b or c character
[a-z]  --> any characters
[^a-z]---> except any lower case character
[a-bA-B0-9] --> any lower/upper case character or digits

predefined character class :
---------------------------

1) \s  --> white space character
2) \S --> except white space character
3) \d  --> any digit 0 to 9
4) \D ---> except any digit
5)\w  ---> any word ie a-zA-z0-9
6)\W ---> except word ie special character
7).  --> character including special character except new line

Quantifiers : used to specify no of occurences  to match
-------------
1) a  -> exact match of a occurence
2) a+ -> atleast one or more occurence
3) a* --> zero or any number of occurence of a  [a* = a+ u {E}] {E} means epcilon zero times
4)a? --> at most one occurence of a 
5)a{X}	Match sequence of X a's
6) a{X,Y}	Match sequence of X to Y a's
7) a{X,}	Match sequence of X or more a's




