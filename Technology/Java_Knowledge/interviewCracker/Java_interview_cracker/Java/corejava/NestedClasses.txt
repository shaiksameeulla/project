Nested classes :
-----------------
Nested classes are divided into two categories: 
		1) static :Nested classes that are declared static are called static nested classes.
		2) non-static : Non-static nested classes are called "inner classes".
			-->There are two special kinds of inner classes: local classes and anonymous classes.
		
1) A nested class is a member of its enclosing class.
2) 	Non-static nested classes (inner classes) have access to other members of the enclosing class, even if they are declared private.
		
3) Static nested classes do not have access to other members of the enclosing class.
 As a member of the OuterClass, a nested class can be declared private, public, protected, or package private. 
 (Recall that outer classes can only be declared public or package private.

InnerClass(NonStatic nested class ):

sample : class Outer{
		class inner{
						}
					}
					
Ex1 : class Outer{
   class inner{
   public void m(){
   }
   public void m1(){  inner in= new inner();
   in.m();
   }
   public static void main(String args[]){
   Outer o = new Outer(); o.m1();
   }

 Notes : 
 i) accessing inner class code from instance of outer class
 ii) accessing inner class code from  Static of outer class
 iii) Accessing inner class from outside of outer class : Outer o= new Outer(); Outer.inner in=o.new inner(); in.m1();
 iv) within inner class "this" current inner class. if you want to access outerclass object in inner class "outer.this.variable"(Shadowing)
 v) within the inner class static members can be accecssiable.
 class outer{
 int i=10;
 class inner{
 int i=12;
 public m1(){
 int i=100;
 sysout(i);//100
 sysout(this.i);//12
 sysout(outer.this.i);//10 (Shadowing)
 }
 }
 }
  
 
Static Nested Classes::

Local Inner Class in Java:::

Local Inner Classes are the inner classes that are defined inside a block. Generally, this block is a method body. Sometimes this block can be a for loop, or an if clause.Local Inner classes are not a member of any enclosing classes. They belong to the block they are defined within, due of which local inner classes cannot have any access modifiers associated with them. However, they can be marked as final or abstract. These class have access to the fields of the class enclosing it. Local inner class must be instantiated in the block they are defined in

Rules of Local Inner Class:

The scope of local inner class is restricted to the block they are defined in.
Local inner class cannot be instantiated from outside the block where it is created in.
Till JDK 7,Local inner class can access only final local variable of the enclosing block. However From JDK 8, it is possible to access the non-final local variable of enclosing block in local inner class.
A local class has access to the members of its enclosing class.
Local inner classes can extend an abstract class or can also implement an interface.
         
Declaring a Local Inner class: 

A local inner class can be declared within a block. This block can be either a method body, initialization block, for loop or even an if statement.

Accessing Members:
 A local inner class has access to fields of the class enclosing it as well as the fields of the block that it is defined within. These classes, however, can access the variables or parameters of the block that encloses it only if they are declared as final or are effectively final. A variable whose value is not changed once initialized is called as effectively final variable. A local inner class defined inside a method body, have access to itâ€™s parameters.
 
 Notes :
 1) You cannot declare static initializers or member interfaces in a local class.
 2) A local class can have static members provided that they are constant variables. ex: static final int x=10;
 3) You cannot declare an interface inside a block; interfaces are inherently static.
 4)Local classes are non-static because they have access to instance members of the enclosing block. Consequently, they cannot contain most kinds of static declarations.

What happens at compile time?

When a program containing a local inner class is compiled, the compiler generate two .class files, one for the outer class and the other for the inner class that has the reference to the outer class. The two files are named by compiler as:

Outer.class
Outer$1Inner.class
Declaration within a me
