Serialization :

In general there are three approaches to serialization in java:

1) Implement Serializable and use default protocol.
2) Implement Serializable and get a chance to modify the default protocol.
3) Implement Externalizable and write your own protocol to implement serailization.

Customize Java Serialization

We know Serializable is a java marker interface. When a class implements Serializable interface it gives information to the JVM that the instances of these classes can be serialized. Along with that, there is a special note to the JVM

look for following two methods in the class that implements Serializable. If found invoke that and continue with serialization process else directly follow the standard serialization protocol.

So this gives us a chance to write these two methods insided the Class that implements Serializable and you get a hook to the serialization process. You can write your custom code inside these two methods and customize the standard behaviour of serialization.

private void writeObject(ObjectOutputStream out) throws IOException;
private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException;


/***99999******/
If the superclass is serializable but we donâ€™t want the subclass to be serialized.

To prevent subclass from being serialized we must implement writeObject() and readObject() method and need to throw NotSerializableException from these methods. 
/****999*****/

I have modified the Lion class to include these two methods and on the fly I change a property of Lion to demonstrate this. This is not overriding or overloading methods and this is a mechanism provided by serialization. These two included methods are declared private but JVM can access the private methods of an object. There is no change to the class that does the serialization and de-serialization.

package basic.serialization.customization;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.Serializable;

public class SampleSerialization implements Serializable {

	public int getSecNumber() {
		return secNumber;
	}

	public void setSecNumber(int secNumber) {
		this.secNumber = secNumber;
	}

	private String var1 = "var1";

	private String var2 = "var2";
	private transient int secNumber = 88;
	private transient String secName = "sami";

	public String getVar1() {
		return var1;
	}

	public void setVar1(String var1) {
		this.var1 = var1;
	}

	public String getVar2() {
		return var2;
	}

	public void setVar2(String var2) {
		this.var2 = var2;
	}

	private void writeObject(ObjectOutputStream out) throws IOException {
		setVar1("sami");
		out.defaultWriteObject();
		out.writeInt(secNumber);
		out.writeObject(secName);
	}

	private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
		in.defaultReadObject();
		secNumber = in.readInt();
		secName = (String) in.readObject();
	}

	public String getSecName() {
		return secName;
	}

	public void setSecName(String secName) {
		this.secName = secName;
	}

}

Externalizable ::

@Override
public void writeExternal(ObjectOutput oo) throws IOException 
{
    oo.writeObject(userName);
    oo.writeObject(roll);
}

@Override
public void readExternal(ObjectInput oi) throws IOException, ClassNotFoundException 
{
    userName = (String)oi.readObject();
    roll = (Integer)oi.readObject();
}


Key differences between Serializable and Externalizable::
----------------------------------

Marker interface: Serializable is marker interface without any methods. Externalizable interface contains two methods: writeExternal() and readExternal().

Serialization process: Default Serialization process will be kicked-in for classes implementing  Serializable interface. Programmer defined Serialization process will be kicked-in for classes implementing Externalizable interface.

Maintenance: If any new Non-Serializable is added to Serializable Object, Serialization process will break at runtime. But it does not happen if you implement Externalizable. That new attribute won't be serialized unless you explicitly write it.

Backward Compatibility and Control: If you have to support multiple versions, you can have full control with Externalizable interface. You can support different versions of your object. If you implement Externalizable, it's your responsibility to serialize super class

public No-arg constructor:  Serializable uses reflection to construct object and does not require no arg constructor. But Externalizable demands public no-arg constructor.
