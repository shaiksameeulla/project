JPMorgan:
-----------

Round2:
-----
1.SOLID principles Single,Objectliskove,
		S - Single-responsiblity Principle
		O - Open-closed Principle
		L - Liskov Substitution Principle
		I - Interface Segregation Principle
		D - Dependency Inversion Principle
2. Singleton , write code.
3.Serialization
4.Hashmap: internals
5. count occurence of i in "india is my country", in java8
   long cnt = str.chars().filter(ch -> ch == 'o').count();
6. method override
7. class with same method  name with 1 param  diff type, when i call method(null)? it's creates ambiguity.
8. aggregation & composition
Inheritance (IS-A) vs. Composition (HAS-A) Relationship
  Composition is a “belongs-to” type of relationship. It means that one of the objects is a logically larger structure, which contains the other object. In other words, it's part or member of the other object.
    Alternatively, we often call it a “has-a” relationship (as opposed to an “is-a” relationship, which is inheritance).
   Aggregation
   Aggregation is also a “has-a” relationship. What distinguishes it from composition, that it doesn't involve owning. As a result, the lifecycles of the objects aren't tied: every one of them can exist independently of each other.

For example, a room belongs to a building, or in other words a building has a room. So basically, whether we call it “belongs-to” or “has-a” is only a matter of point of view.

Composition is a strong kind of “has-a” relationship because the containing object owns it. Therefore, the objects' lifecycles are tied. It means that if we destroy the owner object, its members also will be destroyed with it. For example, the room is destroyed with the building in our previous example.

Note that doesn't mean, that the containing object can't exist without any of its parts. For example, we can tear down all the walls inside a building, hence destroy the rooms. But the building will still exist.

In terms of cardinality, a containing object can have as many parts as we want. However, all of the parts need to have exactly one container.

9.  check if the nnumber is consecutives are not
1,2,3,    if sequence is consecutive then you need to say consecutive otherwise not consecutive.
        11,12

round3 :
------
1.singleton class in java
2. how to Junit for singleton: validtion at test case
3. uniquesness and insertion order datastructure  _--linkedhashet
4. hashmap internal working when we dont override hascode but only equals.
5.mutable class
6. ExectorFramework
7.Threapool Exectutor
8.Dependency injection
9 @autowire ()
10.@primary
11. Topmost Hierarchy in Exception class
12. Errors in Hierarchy?
13. consumers, partitions, 1topic, 5 consumers 100 partitions
14. deadlocks, how to detect ?
15. table locking, multiple threads trying to update the table/row


