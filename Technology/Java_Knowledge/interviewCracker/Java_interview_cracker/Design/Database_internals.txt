Database INternals:
===================
1. Database internally uses B+ trees
2. serialized and stored in disk.
3.
lets starts simple:
====================
1. rows/records are  stored in one file sequentially
2. inserts  cannot inserts at the middle of the rows as it may overrides, otherwise we need to create and copy the existing row, locate the position create then insert the records
 it takes O(n)
 3. update :
		when we update the records,  we should make sure width of the row should not exeed with otherrows otherwise it fringe other row.
4. find one
   linear  scan
   
   solution is B+ trees
   
   B+ Tree is balanced binary search tree that can simply be a B Tree, where data is stored in keys, not key-value pairs.
   appication/uses : Database systems, file systems, where range queries are common
   
   leaf nodes holds row data..
   
   if leaf nodes hold rows then what holds at higher/parent node...???
   
   non leaf nodes holds routing informations.... range of their childs
   
   all leafs is linearly connected.
   
   
   update inmemory in flush it to disk
   
   
   ==================================
   
   
   Basically an index on a table works like an index in a book (that's where the name came from):

Let's say you have a book about databases and you want to find some information about, say, storage. Without an index (assuming no other aid, such as a table of contents) you'd have to go through the pages one by one, until you found the topic (that's a full table scan). On the other hand, an index has a list of keywords, so you'd consult the index and see that storage is mentioned on pages 113-120,231 and 354. Then you could flip to those pages directly, without searching (that's a search with an index, somewhat faster).

Of course, how useful the index will be, depends on many things - a few examples, using the simile above:

if you had a book on databases and indexed the word "database", you'd see that it's mentioned on pages 1-59,61-290, and 292 to 400. In such case, the index is not much help and it might be faster to go through the pages one by one (in a database, this is "poor selectivity").
For a 10-page book, it makes no sense to make an index, as you may end up with a 10-page book prefixed by a 5-page index, which is just silly - just scan the 10 pages and be done with it.
The index also needs to be useful - there's generally no point to index e.g. the frequency of the letter "L" per page.
   
