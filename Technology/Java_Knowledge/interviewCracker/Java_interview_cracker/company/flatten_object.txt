Flatten JavaScript objects into a single-depth Object

const nestedData = {
name: 'Abc',
age: '29',
address: {
pincode: '110011',
area: 'bangalore',
state: 'karnataka',
location: {
lat: '122.21',
long: '11.21',
},
phone: '1212121',
},
};

Output:
const op = {
"nestedData_name": "Abc",
"nestedData_age": "29",
"nestedData_address_pincode": "110011",
"nestedData_address_area": "bangalore",
"nestedData_address_state": "karnataka",
"nestedData_address_location_lat": "122.21",
"nestedData_address_location_long": "11.21",
"nestedData_address_phone": "1212121"
}


Return Value: This method returns a string which contains the type of the passed variable.

Approach:

We make a function called flatten object which takes input of an object and returns an object.
Loop through the object and check the type of the current property:
If it is of type Object and it is not an Array , recursively call the function again.
Otherwise, store the value in the result.
Return the object.
Example:


// Declare an object
let ob = {
    Company: "GeeksforGeeks",
    Address: "Noida",
    contact: +91-999999999,
    mentor: {
        HTML: "GFG",
        CSS: "GFG",
        JavaScript: "GFG"
    }
};
 
// Declare a flatten function that takes
// object as parameter and returns the
// flatten object
const flattenObj = (ob) => {
 
    // The object which contains the
    // final result
    let result = {};
 
    // loop through the object "ob"
    for (const i in ob) {
 
        // We check the type of the i using
        // typeof() function and recursively
        // call the function again
        if ((typeof ob[i]) === 'object' && !Array.isArray(ob[i])) {
            const temp = flattenObj(ob[i]);
            for (const j in temp) {
 
                // Store temp in result
                result[i + '.' + j] = temp[j];
            }
        }
 
        // Else store ob[i] in result directly
        else {
            result[i] = ob[i];
        }
    }
    return result;
};
 
console.log(flattenObj(ob));