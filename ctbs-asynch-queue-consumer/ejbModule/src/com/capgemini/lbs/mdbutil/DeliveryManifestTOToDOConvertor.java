package src.com.capgemini.lbs.mdbutil;

import java.util.ArrayList;
import java.util.Calendar;
import java.util.List;

import org.apache.commons.beanutils.PropertyUtils;
import org.apache.commons.lang.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import src.com.dtdc.constants.DeliveryManifestConstants;
import src.com.dtdc.mdbDao.delivery.DeliveryManifestMDBDAO;
import src.com.dtdc.mdbServices.CTBSApplicationMDBDAO;

import com.capgemini.lbs.framework.constants.BookingConstants;
import com.capgemini.lbs.framework.exception.CGBusinessException;
import com.capgemini.lbs.framework.exception.CGSystemException;
import com.capgemini.lbs.framework.frameworkbaseDO.CGBaseEntity;
import com.capgemini.lbs.framework.utils.DateFormatterUtil;
import com.capgemini.lbs.framework.utils.StringUtil;
import com.dtdc.domain.booking.BookingLogDO;
import com.dtdc.domain.booking.ProductDO;
import com.dtdc.domain.booking.cashbooking.CashBookingDO;
import com.dtdc.domain.booking.dpbooking.DirectPartyBookingDO;
import com.dtdc.domain.booking.frbooking.FranchiseeBookingDO;
import com.dtdc.domain.master.ReasonDO;
import com.dtdc.domain.master.customer.ConsigneeAddressDO;
import com.dtdc.domain.master.customer.ConsigneeDO;
import com.dtdc.domain.master.document.DocumentDO;
import com.dtdc.domain.master.employee.EmployeeDO;
import com.dtdc.domain.master.franchisee.FranchiseeDO;
import com.dtdc.domain.master.geography.AreaDO;
import com.dtdc.domain.master.geography.CityDO;
import com.dtdc.domain.master.geography.DistrictDO;
import com.dtdc.domain.master.geography.PincodeDO;
import com.dtdc.domain.master.geography.StateDO;
import com.dtdc.domain.master.office.OfficeDO;
import com.dtdc.domain.master.product.ServiceDO;
import com.dtdc.domain.transaction.delivery.DeliveryDO;
import com.dtdc.domain.transaction.delivery.DeliveryManifestBookingDO;
import com.dtdc.domain.transaction.delivery.FranchiseDeliveryManifestDO;
import com.dtdc.domain.transaction.delivery.FranchiseDeliveryManifestHandOverDO;
import src.com.dtdc.constants.CommonConstants;
import com.dtdc.to.delivery.DeliveryManifestTO;
import com.dtdc.to.delivery.FranchiseeDeliveryHandoverTO;
import com.dtdc.to.delivery.FranchiseeDeliveryManifestTO;


// TODO: Auto-generated Javadoc
/**
 * The Class DeliveryManifestTOToDOConvertor.
 */
public class DeliveryManifestTOToDOConvertor {
	
	/** The logger. */
	private static Logger logger = LoggerFactory
			.getLogger(DeliveryManifestTOToDOConvertor.class);

	/**
	 * Branch delivery to to do convertor.
	 *
	 * @param brDeliveryTO the br delivery to
	 * @param deliveryManifestMDBDAO the delivery manifest mdbdao
	 * @return the list
	 * @throws CGBusinessException the cG business exception
	 * @throws CGSystemException the cG system exception
	 */
	public static List<DeliveryDO> branchDeliveryTOToDOConvertor(
			DeliveryManifestTO brDeliveryTO,
			DeliveryManifestMDBDAO deliveryManifestMDBDAO)
			throws CGBusinessException, CGSystemException {
		List<DeliveryDO> brDeliveryList = new ArrayList<DeliveryDO>();
		Double totalWeight = 0.0;
		int totalPieces = 0;
		int rematksCount = 0;
		String drsNum = "";
		int prodID = 0;
		int docID = 0;
		int serviceID = 0;
		int attemptNumber = 0;
		int ptpServiceCount = 0;
		int lenghthCount = 0;
		int breadthCount = 0;
		int heightCount = 0;
		int volumtericCount = 0;
		double bdmWeight = 0.0;
		double bookingWeight = 0.0;
		double weightOnTolarence = 0.0;
		double weightDiff = 0.0;
		DeliveryManifestBookingDO booking = null;
		Double rateAmount = 0.0;
		
		String officeCode = "";
		String[] statues = { "N", "R" };
		// try {
		drsNum = brDeliveryTO.getRunSheetNum();
		rematksCount = brDeliveryTO.getRemarksList().length;
		String isDRSAutogenerated = "N";
		PincodeDO pinCode = new PincodeDO();
		if (StringUtils.isEmpty(drsNum)) {
			isDRSAutogenerated = "Y";
			drsNum = StringUtil.generateRamdomNumber();
			if (!(StringUtils.isEmpty(brDeliveryTO.getBranchCode()))) {
				String[] offCodeList = brDeliveryTO.getBranchCode().split("-");
				officeCode = offCodeList[0].trim();
			}
			drsNum = officeCode + drsNum;
		}
		if (brDeliveryTO.getConsgNum().length > 0) {
			// calculating total weight and pieces
			for (int i = 0; i < brDeliveryTO.getConsgNum().length; i++) {
				if (StringUtils.isNotEmpty(brDeliveryTO.getConsgNum()[i])) {
					totalWeight = totalWeight + brDeliveryTO.getWeight()[i];
					totalPieces = totalPieces + brDeliveryTO.getNoOfPieces()[i];
				}
			}
			for (int i = 0; i < brDeliveryTO.getConsgNum().length; i++) {
				if (StringUtils.isNotEmpty(brDeliveryTO.getConsgNum()[i])) {
					DeliveryDO brDeliveryBean = new DeliveryDO();
					// Grid Data
					if (brDeliveryTO.getDeliveryIDs()[i] != null
							&& brDeliveryTO.getDeliveryIDs()[i] > 0) {
						brDeliveryBean.setDeliveryId(brDeliveryTO
								.getDeliveryIDs()[i]);

					} else{
						brDeliveryBean.setServerDate(DateFormatterUtil
								.getCurrentDate());
					}

					String conNumber = "";
					brDeliveryBean.setPreparationDate(DateFormatterUtil
							.combineDateWithTimeHHMM(
									brDeliveryTO.getPreparationDate(),
									brDeliveryTO.getPreparationTime()));

					conNumber = brDeliveryTO.getConsgNum()[i];
					// Inserting attempt Number
					attemptNumber = deliveryManifestMDBDAO.getAttemptNumber(
							conNumber, statues);
					if (attemptNumber > 0) {
						attemptNumber = attemptNumber + 1;
					} else {
						attemptNumber = 1;
					}

					/*
					 * if (attemptNumber > 3) { brDeliveryBean
					 * .setConsgStatus(DeliveryManifestConstants
					 * .CONSGN_STATUS_CLOSED); brDeliveryBean
					 * .setDeliveryStatus(DeliveryManifestConstants
					 * .CONSGN_STATUS_RETURN); } else {
					 */
					brDeliveryBean
							.setConsgStatus(DeliveryManifestConstants.OPEN_STATUS);
					brDeliveryBean
							.setDeliveryStatus(DeliveryManifestConstants.CONSGN_STATUS_BDM);

					// }
					brDeliveryBean.setAttemptNum(attemptNumber);
					brDeliveryBean.setAttemptDate(DateFormatterUtil
							.combineDateWithTimeHHMM(
									brDeliveryTO.getPreparationDate(),
									brDeliveryTO.getPreparationTime()));
					brDeliveryBean.setConNum(conNumber);
					brDeliveryBean.setConsgWeight(brDeliveryTO.getWeight()[i]);
					// Updating into Booking table
					bdmWeight = brDeliveryTO.getWeight()[i];
					bookingWeight = brDeliveryTO.getBookedWeightList()[i];
					weightOnTolarence = brDeliveryTO.getWeightTolarence();
					weightDiff = bdmWeight - bookingWeight;
					booking = deliveryManifestMDBDAO
							.getBookingDetails(brDeliveryTO.getConsgNum()[i]);
					// Calling rate calculation module
					if (weightDiff > weightOnTolarence) {
						// TO DO Rate Calculation part
						/*if (booking != null) {
							RateCalculationInputTO inputTo = populateValuesRateCalc(
									booking, bdmWeight);
							rateCalcService = rateCalcFactory
									.getCalculationServiceFor(inputTo
											.getTypeTo());
							if (rateCalcService != null) {
								try {
									outputTO = rateCalcService
											.calculateRate(inputTo);
								} catch (CGBusinessException e) {
									//e#prntstcktrce
									brDeliveryBean.setError(e.getMessage());
								}
							}
							if (outputTO != null) {
								rateAmount = outputTO.getSlabCharge();
							}
						}*/
						// Inserting into Booking Log Table
						CGBaseEntity bookingDO = null;
						CGBaseEntity bookingEntity = null;
						String entityName = "";
						String bookingType = booking.getBookingType();
						try {
							if (StringUtils.equals(bookingType,
									BookingConstants.FRANCHISEE_TYPE)) {
								entityName = FranchiseeBookingDO.class
										.getName();
							} else if (StringUtils.equals(bookingType,
									BookingConstants.DIRECT_PARTY_TYPE)) {
								entityName = DirectPartyBookingDO.class
										.getName();
							} else if (StringUtils.equals(bookingType,
									BookingConstants.CASH_TYPE)) {
								entityName = CashBookingDO.class.getName();
							}
							if (entityName != null) {
								Class clazz = Class.forName(entityName);
								bookingEntity = (CGBaseEntity) clazz
										.newInstance();
								bookingDO = deliveryManifestMDBDAO.getBooking(
										brDeliveryTO.getConsgNum()[i],
										bookingEntity);
								if (bookingDO != null) {
									BookingLogDO bookingLog = new BookingLogDO();
									PropertyUtils.copyProperties(bookingLog,
											bookingDO);
									bookingLog.setUpdatedFromProcess("BDM");
									deliveryManifestMDBDAO
											.insertBookingLog(bookingLog);
								}
							}
						} catch (Exception e) {
							logger.error("DeliveryManifestTOToDOConvertor::branchDeliveryTOToDOConvertor::Exception occured:"
									+e.getMessage());
						}

						// Updating Weight and Rate amount into Booking
						deliveryManifestMDBDAO.updateBookedWeight(conNumber,
								brDeliveryTO.getWeight()[i], rateAmount, "BDM");
						// Updating the status in SAP Integration table
						deliveryManifestMDBDAO.updateSAPIntgConsgStatus(
								brDeliveryTO.getConsgNum()[i],
								CommonConstants.CONSGN_BILLING_STATUS_SAP_INTG);
					}
					// Updating Destination into Booking
					String destPinCode = "";
					String bookDestPinCode = "";
					destPinCode = brDeliveryTO.getPinCode()[i];
					pinCode.setPincodeId(deliveryManifestMDBDAO
							.getPinCodeIdByCode(destPinCode));
					brDeliveryBean.setDestPinCode(pinCode);

					if (booking != null) {
						pinCode = booking.getDestPinCode();
						if (pinCode != null) {
							bookDestPinCode = pinCode.getPincode();
						}
						if (!StringUtils.equals(destPinCode, bookDestPinCode)) {
							// TO DO Rate Calculation part
							/*if (booking != null) {
								RateCalculationInputTO inputTo = populateValuesRateCalc(
										booking, bdmWeight);
								rateCalcService = rateCalcFactory
										.getCalculationServiceFor(inputTo
												.getTypeTo());
								if (rateCalcService != null) {
									try {
										outputTO = rateCalcService
												.calculateRate(inputTo);
									} catch (CGBusinessException e) {
										//e#prntstcktrce
										brDeliveryBean.setError(e.getMessage());
									}
								}
								if (outputTO != null) {
									rateAmount = outputTO.getSlabCharge();
								}
							}*/
							// Inserting into Booking Log Table
							CGBaseEntity bookingDO = null;
							CGBaseEntity bookingEntity = null;
							String entityName = "";
							String bookingType = booking.getBookingType();
							try {
								if (StringUtils.equals(bookingType,
										BookingConstants.FRANCHISEE_TYPE)) {
									entityName = FranchiseeBookingDO.class
											.getName();
								} else if (StringUtils.equals(bookingType,
										BookingConstants.DIRECT_PARTY_TYPE)) {
									entityName = DirectPartyBookingDO.class
											.getName();
								} else if (StringUtils.equals(bookingType,
										BookingConstants.CASH_TYPE)) {
									entityName = CashBookingDO.class.getName();
								}
								if (entityName != null) {
									Class clazz = Class.forName(entityName);
									bookingEntity = (CGBaseEntity) clazz
											.newInstance();
									bookingDO = deliveryManifestMDBDAO.getBooking(
											brDeliveryTO.getConsgNum()[i],
											bookingEntity);
									if (bookingDO != null) {
										BookingLogDO bookingLog = new BookingLogDO();
										PropertyUtils.copyProperties(
												bookingLog, bookingDO);
										bookingLog.setUpdatedFromProcess("BDM");
										deliveryManifestMDBDAO
												.insertBookingLog(bookingLog);
									}
								}
								// Updating Destination into Booking
								deliveryManifestMDBDAO.updateDestIntoBooking(
										destPinCode, conNumber, rateAmount,
										"BDM");

							} catch (Exception e) {
								logger.error("DeliveryManifestTOToDOConvertor::branchDeliveryTOToDOConvertor::Exception occured:"
										+e.getMessage());
							}
						}

					}

					brDeliveryBean.setConsgNumOFPieces(brDeliveryTO
							.getNoOfPieces()[i]);
					OfficeDO office = new OfficeDO();
					EmployeeDO employee = new EmployeeDO();
					employee.setEmployeeId(brDeliveryTO.getEmpID());
					office.setOfficeId(brDeliveryTO.getBranchID());
					brDeliveryBean.setBranch(office);
					brDeliveryBean.setEmployee(employee);
					prodID = brDeliveryTO.getProductIDs().length;
					if (prodID > 0 && brDeliveryTO.getProductIDs()[i] > 0) {
						ProductDO product = new ProductDO();
						product.setProductId(brDeliveryTO.getProductIDs()[i]);
						brDeliveryBean.setProduct(product);
					}
					if (rematksCount > i) {
						brDeliveryBean
								.setRemarks(brDeliveryTO.getRemarksList()[i]);
					}
					// Header Data
					brDeliveryBean.setPhNum(brDeliveryTO.getPhNum());
					brDeliveryBean.setTotalNumOFPieces(totalPieces);
					brDeliveryBean.setTotalWeight(totalWeight);
					brDeliveryBean.setPreparationDate(DateFormatterUtil
							.combineDateWithTimeHHMM(
									brDeliveryTO.getPreparationDate(),
									brDeliveryTO.getPreparationTime()));
					brDeliveryBean.setRunSheetNum(drsNum);
					brDeliveryBean.setDrsAutoGenerated(isDRSAutogenerated);
					brDeliveryBean.setDbServer(brDeliveryTO.getDbServer());
					// for DOcument
					docID = brDeliveryTO.getDocumentIDs()[i];
					if (docID > 0) {
						DocumentDO document = new DocumentDO();
						document.setDocumentId(docID);
						brDeliveryBean.setDocument(document);
					}
					// for Service
					serviceID = brDeliveryTO.getServiceIDs().length;
					if (serviceID > 0 && brDeliveryTO.getServiceIDs()[i] > 0) {
						ServiceDO service = new ServiceDO();
						service.setServiceId(brDeliveryTO.getServiceIDs()[i]);
						brDeliveryBean.setService(service);
					}
					// PTP service
					ptpServiceCount = brDeliveryTO.getPtpService().length;
					if (ptpServiceCount > 0) {
						brDeliveryBean.setPtpService(brDeliveryTO
								.getPtpService()[i]);
					}
					// For Volumetric implementation
					lenghthCount = brDeliveryTO.getLengthInCmsList().length;
					breadthCount = brDeliveryTO.getBreadthInCmsList().length;
					heightCount = brDeliveryTO.getHeightInCmsList().length;
					volumtericCount = brDeliveryTO.getVolumtericWeightList().length;
					if (lenghthCount > 0) {
						brDeliveryBean.setLength(brDeliveryTO
								.getLengthInCmsList()[i]);
					}
					if (breadthCount > 0) {
						brDeliveryBean.setBreadth(brDeliveryTO
								.getBreadthInCmsList()[i]);
					}
					if (heightCount > 0) {
						brDeliveryBean.setHeight(brDeliveryTO
								.getHeightInCmsList()[i]);
					}
					if (volumtericCount > 0) {
						brDeliveryBean.setVolumetricWeight(brDeliveryTO
								.getVolumtericWeightList()[i]);
					}

					brDeliveryList.add(brDeliveryBean);
				}
			}
		}
		/*
		 * } catch (Exception e) {
		 * logger.error("Error occured in branchDeliveryTOToDOConvertor() " +
		 * e.getMessage()); //e#prntstcktrce }
		 */
		return brDeliveryList;
	}

	/*
	 * public static DeliveryManifestHistoryDO converterFrDeliveryDOFrHistoryDO(
	 * DeliveryDO frDelivery, String deliveryCode) { DeliveryManifestHistoryDO
	 * frHistory = new DeliveryManifestHistoryDO(); try { if (frDelivery !=
	 * null) { frHistory.setDeliveryId(frDelivery.getDeliveryId());
	 * frHistory.setRefNum(frDelivery.getRefNum());
	 * frHistory.setDeliveryStatus(frDelivery.getDeliveryStatus());
	 * frHistory.setDeliveryDate(frDelivery.getDeliveryDate());
	 * frHistory.setDeliveryTime(frDelivery.getDeliveryTime());
	 * frHistory.setCodAmt(frDelivery.getCodAmt());
	 * frHistory.setConsgStatus(frDelivery.getConsgStatus());
	 * frHistory.setReceiverDetails(frDelivery.getReceiverDetails());
	 * frHistory.setManifestNum(frDelivery.getManifestNum());
	 * frHistory.setActualNum(frDelivery.getActualNum());
	 * frHistory.setConsgOrigin(frDelivery.getConsgOrigin());
	 * frHistory.setConsgWeight(frDelivery.getConsgWeight());
	 * frHistory.setConsgWeight(frDelivery.getConsgWeight());
	 * frHistory.setTotalNumOFPieces(frDelivery.getTotalNumOFPieces());
	 * frHistory.setAttemptNum(frDelivery.getAttemptNum());
	 * frHistory.setConsgCount(frDelivery.getConsgCount());
	 * frHistory.setHandOverTime(frDelivery.getHandOverTime());
	 * frHistory.setHandOverNum(frDelivery.getHandOverNum());
	 * frHistory.setRemarks(frDelivery.getRemarks());
	 * frHistory.setPreparationTime(frDelivery.getPreparationTime());
	 * frHistory.setManifestDate(frDelivery.getManifestDate());
	 * frHistory.setRecvByCode(frDelivery.getRecvByCode());
	 * frHistory.setReceiverDetails(frDelivery.getReceiverDetails());
	 * frHistory.setRelationShip(frDelivery.getRelationShip());
	 * frHistory.setPhNum(frDelivery.getPhNum());
	 * frHistory.setPtpService(frDelivery.getPtpService());
	 * frHistory.setEmployee(frDelivery.getEmployee());
	 * frHistory.setBranch(frDelivery.getBranch());
	 * frHistory.setReportingBranch(frDelivery.getReportingBranch());
	 * frHistory.setFranchisee(frDelivery.getFranchisee());
	 * frHistory.setFdmNumber(frDelivery.getFdmNumber());
	 * frHistory.setConsgNumOFPieces(frDelivery.getConsgNumOFPieces());
	 * frHistory.setCustomer(frDelivery.getCustomer());
	 * frHistory.setOriginROBranch(frDelivery.getOriginROBranch());
	 * frHistory.setDocument(frDelivery.getDocument());
	 * frHistory.setAttemptDate(frDelivery.getAttemptDate());
	 * frHistory.setAttemptTime(frDelivery.getAttemptTime());
	 * frHistory.setReason(frDelivery.getReason());
	 * frHistory.setPod(frDelivery.getPod());
	 * frHistory.setDbServer(frDelivery.getDbServer());
	 * frHistory.setValidation(frDelivery.getValidation()); if
	 * (!(StringUtils.isEmpty(deliveryCode))) {
	 * frHistory.setDeliveryCode(deliveryCode); }
	 * frHistory.setPreparationDate(frDelivery.getPreparationDate());
	 * frHistory.setProduct(frDelivery.getProduct());
	 * frHistory.setConNum(frDelivery.getConNum());
	 * frHistory.setRunSheetNum(frDelivery.getRunSheetNum());
	 * frHistory.setService(frDelivery.getService()); // For Volumetric weight
	 * implementation
	 * frHistory.setVolumetricWeight(frDelivery.getVolumetricWeight());
	 * frHistory.setLength(frDelivery.getLength());
	 * frHistory.setBreadth(frDelivery.getBreadth());
	 * frHistory.setHeight(frDelivery.getHeight()); } } catch (Exception obj) {
	 * logger.info("Error occured in converterFrDeliveryDOFrHistoryDO().."); }
	 * return frHistory; }
	 */

	/**
	 * Bdm to fdm convertor.
	 *
	 * @param brDeliveryTO the br delivery to
	 * @param deliveryIDs the delivery i ds
	 * @param deliveryManifestMDBDAO the delivery manifest mdbdao
	 * @return the list
	 * @throws CGBusinessException the cG business exception
	 */
	public static List<FranchiseDeliveryManifestDO> bdmToFdmConvertor(
			DeliveryManifestTO brDeliveryTO, List<Integer> deliveryIDs,
			DeliveryManifestMDBDAO deliveryManifestMDBDAO) throws CGBusinessException {
		Double deletedWeight = 0.0;
		int deletedPieces = 0;
		String fdmNum = null;
		int prodID = 0;
		int serviceID = 0;
		int docID = 0;
		int lenghthCount = 0;
		int breadthCount = 0;
		int heightCount = 0;
		int volumtericCount = 0;
		String[] statues = { "N", "R", "O" };
		int attemptNumber = 0;
		List<FranchiseDeliveryManifestDO> brDeliveryList = new ArrayList<FranchiseDeliveryManifestDO>();
		fdmNum = brDeliveryTO.getFdmNumber();
		if (StringUtils.isEmpty(fdmNum)) {
			fdmNum = StringUtil.generateRamdomNumber();
		}
		if (brDeliveryTO.getSlNo().length > 0) {
			// calculating total weight and pieces
			for (int i = 0; i < brDeliveryTO.getSlNo().length; i++) {
				for (int j = 0; j < deliveryIDs.size(); j++) {
					long deliveID = deliveryIDs.get(j);
					if (brDeliveryTO.getDeliveryIDs()[i] == deliveID) {
						deletedWeight = deletedWeight
								+ brDeliveryTO.getWeight()[i];
						deletedPieces = deletedPieces
								+ brDeliveryTO.getNoOfPieces()[i];
					}
				}
			}
			// FDM Preparation
			for (int i = 0; i < brDeliveryTO.getSlNo().length; i++) {
				for (int j = 0; j < deliveryIDs.size(); j++) {
					long deliveID = deliveryIDs.get(j);
					// logDetails
					if (brDeliveryTO.getDeliveryIDs()[i] == deliveID) {
						// BDM Preparation
						FranchiseDeliveryManifestDO brDeliveryBean = new FranchiseDeliveryManifestDO();
						brDeliveryBean.setConNum(brDeliveryTO.getConsgNum()[i]);
						brDeliveryBean
								.setConsgWeight(brDeliveryTO.getWeight()[i]);
						brDeliveryBean.setConsgNumOFPieces(brDeliveryTO
								.getNoOfPieces()[i]);
						OfficeDO branch = new OfficeDO();
						branch.setOfficeId(brDeliveryTO.getBranchID());
						brDeliveryBean.setBranch(branch);
						brDeliveryBean
								.setRemarks(brDeliveryTO.getRemarksList()[i]);
						// for volumetric weight
						lenghthCount = brDeliveryTO.getLengthInCmsList().length;
						breadthCount = brDeliveryTO.getBreadthInCmsList().length;
						heightCount = brDeliveryTO.getHeightInCmsList().length;
						volumtericCount = brDeliveryTO
								.getVolumtericWeightList().length;
						if (lenghthCount > 0) {
							brDeliveryBean.setLength(brDeliveryTO
									.getLengthInCmsList()[i]);
						}
						if (lenghthCount > 0) {
							brDeliveryBean.setBreadth(brDeliveryTO
									.getBreadthInCmsList()[i]);
						}
						if (lenghthCount > 0) {
							brDeliveryBean.setHeight(brDeliveryTO
									.getHeightInCmsList()[i]);
						}
						if (lenghthCount > 0) {
							brDeliveryBean.setVolumetricWeight(brDeliveryTO
									.getVolumtericWeightList()[i]);
						}
						brDeliveryBean.setPhNum(brDeliveryTO.getPhNum());
						brDeliveryBean.setTotalNumOFPieces(deletedPieces);
						brDeliveryBean.setTotalWeight(deletedWeight);
						brDeliveryBean.setPreparationDate(DateFormatterUtil
								.combineDateWithTimeHHMM(
										brDeliveryTO.getPreparationDate(),
										brDeliveryTO.getPreparationTime()));
						brDeliveryBean.setCodAmt(brDeliveryTO.getCodAmt());
						brDeliveryBean.setRefNum(brDeliveryTO.getRefNum());
						prodID = brDeliveryTO.getProductIDs().length;
						if (prodID > 0 && brDeliveryTO.getProductIDs()[i] > 0) {
							ProductDO product = new ProductDO();
							product.setProductId(brDeliveryTO.getProductIDs()[i]);
							brDeliveryBean.setProduct(product);
						}
						serviceID = brDeliveryTO.getServiceIDs().length;
						if (serviceID > 0 && brDeliveryTO.getServiceIDs()[i] > 0) {
							ServiceDO service = new ServiceDO();
							service.setServiceId(brDeliveryTO.getServiceIDs()[i]);
							brDeliveryBean.setService(service);
						}
						ReasonDO reason = new ReasonDO();
						reason.setReasonId(brDeliveryTO.getReasonID());
						brDeliveryBean.setReason(reason);
						FranchiseeDO franchisee = new FranchiseeDO();
						franchisee.setFranchiseeId(brDeliveryTO
								.getFranchiseeID());
						brDeliveryBean.setFranchisee(franchisee);
						OfficeDO reportingOffice = new OfficeDO();
						reportingOffice.setOfficeId(brDeliveryTO
								.getReportingBranchID());
						brDeliveryBean.setReportingBranch(reportingOffice);
						brDeliveryBean.setFdmNumber(fdmNum);
						brDeliveryBean
								.setRunSheetNum(DeliveryManifestConstants.EMPTY_STRING);
						docID = brDeliveryTO.getDocumentIDs()[i];

						if (docID > 0) {
							DocumentDO document = new DocumentDO();
							document.setDocumentId(docID);
							brDeliveryBean.setDocument(document);
						}
						brDeliveryBean.setRunSheetNum(brDeliveryTO
								.getRunSheetNum());

						attemptNumber = deliveryManifestMDBDAO.getAttemptNumber(
								brDeliveryTO.getConsgNum()[i], statues);
						if (attemptNumber > 0) {
							attemptNumber = attemptNumber + 1;
						} else {
							attemptNumber = 1;
						}
						brDeliveryBean.setAttemptNum(attemptNumber);
						brDeliveryBean.setAttemptDate(DateFormatterUtil
								.stringToDDMMYYYYFormat(DateFormatterUtil
										.todayDate()));
						brDeliveryBean
								.setConsgStatus(DeliveryManifestConstants.OPEN_STATUS);
						brDeliveryBean
								.setDeliveryStatus(DeliveryManifestConstants.CONSGN_STATUS_FDM);
						/*
						 * if (attemptNumber > 3) { brDeliveryBean
						 * .setConsgStatus
						 * (DeliveryManifestConstants.CONSGN_STATUS_CLOSED);
						 * brDeliveryBean
						 * .setDeliveryStatus(DeliveryManifestConstants
						 * .CONSGN_STATUS_RETURN); } else { brDeliveryBean
						 * .setConsgStatus
						 * (DeliveryManifestConstants.CONSGN_STATUS_FDM);
						 * brDeliveryBean
						 * .setDeliveryStatus(DeliveryManifestConstants
						 * .CONSGN_STATUS_FDM);
						 * 
						 * }
						 */

						brDeliveryList.add(brDeliveryBean);
					}
				}
			}

		}
		return brDeliveryList;
	}

	/**
	 * Fdm to bdm convertor.
	 *
	 * @param frDeliveryTO the fr delivery to
	 * @param deliveryIDs the delivery i ds
	 * @param deliveryManifestMDBDAO the delivery manifest mdbdao
	 * @return the list
	 * @throws CGBusinessException the cG business exception
	 */
	public static List<DeliveryDO> fdmToBdmConvertor(
			FranchiseeDeliveryManifestTO frDeliveryTO,
			List<Integer> deliveryIDs, DeliveryManifestMDBDAO deliveryManifestMDBDAO)
			throws CGBusinessException {
		Double deletedWeight = 0.0;
		int deletedPieces = 0;
		Float totalWeight = 0.0F;
		int totalPieces = 0;
		int prodID = 0;
		int serviceID = 0;
		int docID = 0;
		int attemptNumber = 0;
		String[] statues = { "N", "R", "P" };
		String drsNum = null;
		List<DeliveryDO> brDeliveryList = new ArrayList<DeliveryDO>();
		drsNum = frDeliveryTO.getRunSheetNum();
		String isDRSAutogenerated = "N";
		if (StringUtils.isEmpty(drsNum)) {
			drsNum = StringUtil.generateRamdomNumber();
			isDRSAutogenerated = "Y";
		}
		if (frDeliveryTO.getSlNo().length > 0) {
			// calculating total weight and pieces
			for (int i = 0; i < frDeliveryTO.getSlNo().length; i++) {
				for (int j = 0; j < deliveryIDs.size(); j++) {
					long deliveID = deliveryIDs.get(j);
					if (frDeliveryTO.getDeliveryIDs()[i] == deliveID) {
						deletedWeight = deletedWeight
								+ frDeliveryTO.getWeight()[i];
						deletedPieces = deletedPieces
								+ frDeliveryTO.getNoOfPieces()[i];
					}
				}
			}
			// BDM Preparation
			if (frDeliveryTO.getSlNo().length > 0) {
				for (int i = 0; i < frDeliveryTO.getSlNo().length; i++) {
					for (int j = 0; j < deliveryIDs.size(); j++) {
						long deliveID = deliveryIDs.get(j);
						if (frDeliveryTO.getDeliveryIDs()[i] == deliveID) {
							// BDM Preparation
							DeliveryDO brDeliveryBean = new DeliveryDO();
							brDeliveryBean
									.setConNum(frDeliveryTO.getConsgNum()[i]);
							brDeliveryBean.setConsgWeight(frDeliveryTO
									.getWeight()[i]);
							brDeliveryBean.setConsgNumOFPieces(frDeliveryTO
									.getNoOfPieces()[i]);
							brDeliveryBean
									.setConsgStatus(DeliveryManifestConstants.OPEN_STATUS);
							brDeliveryBean
									.setDeliveryStatus(DeliveryManifestConstants.CONSGN_STATUS_BDM);
							OfficeDO branch = new OfficeDO();
							branch.setOfficeId(frDeliveryTO.getBranchID());
							brDeliveryBean.setBranch(branch);
							EmployeeDO employee = new EmployeeDO();
							employee.setEmployeeId(frDeliveryTO.getEmpID());
							brDeliveryBean.setEmployee(employee);
							brDeliveryBean.setRemarks(frDeliveryTO
									.getRemarksList()[i]);
							brDeliveryBean.setPhNum(frDeliveryTO.getPhNum());
							brDeliveryBean.setTotalNumOFPieces(deletedPieces);
							brDeliveryBean.setTotalWeight(deletedWeight);
							brDeliveryBean.setPreparationDate(DateFormatterUtil
									.combineDateWithTimeHHMM(
											frDeliveryTO.getPreparationDate(),
											frDeliveryTO.getPreparationTime()));

							brDeliveryBean.setRunSheetNum(drsNum);
							brDeliveryBean
									.setDrsAutoGenerated(isDRSAutogenerated);
							brDeliveryBean.setCodAmt(frDeliveryTO.getCodAmt());
							brDeliveryBean.setRefNum(frDeliveryTO.getRefNum());
							// For volumetric weight
							brDeliveryBean.setLength(frDeliveryTO
									.getLengthInCmsList()[i]);
							brDeliveryBean.setBreadth(frDeliveryTO
									.getBreadthInCmsList()[i]);
							brDeliveryBean.setHeight(frDeliveryTO
									.getHeightInCmsList()[i]);
							brDeliveryBean.setVolumetricWeight(frDeliveryTO
									.getVolumtericWeightList()[i]);

							prodID = frDeliveryTO.getProductIDs().length;
							if (prodID > 0 && frDeliveryTO.getProductIDs()[i] > 0) {
								ProductDO product = new ProductDO();
								product.setProductId(frDeliveryTO
										.getProductIDs()[i]);
								brDeliveryBean.setProduct(product);
							}
							serviceID = frDeliveryTO.getServiceIDs().length;
							if (serviceID > 0 && frDeliveryTO
									.getServiceIDs()[i] > 0 ) {
								ServiceDO service = new ServiceDO();
								service.setServiceId(frDeliveryTO
										.getServiceIDs()[i]);
								brDeliveryBean.setService(service);
							}
							ReasonDO reason = new ReasonDO();
							reason.setReasonId(frDeliveryTO.getReasonID());
							brDeliveryBean.setReason(reason);
							brDeliveryBean
									.setFdmNumber(DeliveryManifestConstants.EMPTY_STRING);
							// for Document
							docID = frDeliveryTO.getDocumentIDs()[i];
							if (docID > 0) {
								DocumentDO document = new DocumentDO();
								document.setDocumentId(docID);
								brDeliveryBean.setDocument(document);
							}
							brDeliveryBean.setFdmNumber(frDeliveryTO
									.getFdmNumber());
							// Inserting attempt Number
							attemptNumber = deliveryManifestMDBDAO
									.getAttemptNumber(
											frDeliveryTO.getConsgNum()[i],
											statues);
							if (attemptNumber > 0) {
								attemptNumber = attemptNumber + 1;
							} else {
								attemptNumber = 1;
							}
							brDeliveryBean.setAttemptNum(attemptNumber);
							brDeliveryBean.setAttemptDate(DateFormatterUtil
									.stringToDDMMYYYYFormat(DateFormatterUtil
											.todayDate()));
							/*
							 * if (attemptNumber > 3) { brDeliveryBean
							 * .setConsgStatus
							 * (DeliveryManifestConstants.CONSGN_STATUS_CLOSED);
							 * brDeliveryBean
							 * .setDeliveryStatus(DeliveryManifestConstants
							 * .CONSGN_STATUS_RETURN); } else { brDeliveryBean
							 * .setConsgStatus
							 * (DeliveryManifestConstants.CONSGN_STATUS_BDM);
							 * brDeliveryBean
							 * .setDeliveryStatus(DeliveryManifestConstants
							 * .CONSGN_STATUS_CLOSED);
							 * 
							 * }
							 */
							brDeliveryList.add(brDeliveryBean);
						}
					}
				}
			}

		}
		return brDeliveryList;
	}

	/**
	 * Franchisee delivery to to do convertor.
	 *
	 * @param frDeliveryManifestTO the fr delivery manifest to
	 * @param deliveryManifestMDBDAO the delivery manifest mdbdao
	 * @param ctbsApplicationMDBDAO the ctbs application mdbdao
	 * @return the list
	 * @throws CGSystemException the cG system exception
	 * @throws CGBusinessException the cG business exception
	 */
	public static List<FranchiseDeliveryManifestDO> franchiseeDeliveryTOToDOConvertor(
			FranchiseeDeliveryManifestTO frDeliveryManifestTO,
			DeliveryManifestMDBDAO deliveryManifestMDBDAO,
			CTBSApplicationMDBDAO ctbsApplicationMDBDAO) throws CGSystemException,
			CGBusinessException {
		List<FranchiseDeliveryManifestDO> frDeliveryManifestList = new ArrayList<FranchiseDeliveryManifestDO>();
		Double totalWeight = 0.0;
		int totalPieces = 0;
		String fdmNum = null;
		fdmNum = frDeliveryManifestTO.getFdmNumber();
		int deliveyIdCount = 0;
		int rematksCount = 0;
		int prodID = 0;
		int docID = 0;
		int ptpServiceCount = 0;
		int serviceID = 0;
		int attemptNumber = 0;
		int lenghthCount = 0;
		int breadthCount = 0;
		int heightCount = 0;
		int volumtericCount = 0;
		double fdmConsgWeight = 0.0;
		double bookingWeight = 0.0;
		double weightOnTolarence = 0.0;
		double weightDiff = 0.0;
		String drsAutoGenerated = "N";
		DeliveryManifestBookingDO booking = null;
		Double rateAmount = 0.0;
	
		OfficeDO deliveredOffice = null;
		PincodeDO destPinCode = null;
		PincodeDO bookingPinCode = null;
		String cutOffTime = "";
		String fdmTime = "";
		String frCode = "";
		String[] statues = { "N", "R" };
		String conNumber = "";
		try {
			if (StringUtils.isEmpty(fdmNum)) {
				drsAutoGenerated = "Y";
				fdmNum = StringUtil.generateRamdomNumber();
				frCode = frDeliveryManifestTO.getFrCode();
				if (!(StringUtils.isEmpty(frCode))) {
					String[] frList = frCode.split("-");
					frCode = frList[0].trim();
				}
				fdmNum = frCode + fdmNum;
			}
			deliveyIdCount = frDeliveryManifestTO.getDeliveryIDs().length;
			rematksCount = frDeliveryManifestTO.getRemarksList().length;
			if (frDeliveryManifestTO.getConsgNum().length > 0) {
				for (int i = 0; i < frDeliveryManifestTO.getConsgNum().length; i++) {
					if (StringUtils.isNotEmpty(frDeliveryManifestTO
							.getConsgNum()[i])) {
						FranchiseDeliveryManifestDO frDeliveryBean = new FranchiseDeliveryManifestDO();
						frDeliveryBean.setTotalWeight(frDeliveryManifestTO
								.getTotalWeight());
						frDeliveryBean.setTotalNumOFPieces(frDeliveryManifestTO
								.getTotalNumOFPieces());
						conNumber = frDeliveryManifestTO.getConsgNum()[i];
						fdmConsgWeight = frDeliveryManifestTO.getWeight()[i];
						frDeliveryBean.setConNum(conNumber);
						frDeliveryBean.setDrsAutoGenerated(drsAutoGenerated);
						// Inserting attempt Number
						attemptNumber = deliveryManifestMDBDAO.getAttemptNumber(
								conNumber, statues);
						if (attemptNumber > 0) {
							attemptNumber = attemptNumber + 1;
						} else {
							attemptNumber = 1;
						}
						/*
						 * if (attemptNumber > 3) { frDeliveryBean
						 * .setConsgStatus(DeliveryManifestConstants
						 * .CONSGN_STATUS_CLOSED); frDeliveryBean
						 * .setDeliveryStatus(DeliveryManifestConstants
						 * .CONSGN_STATUS_RETURN); } else {
						 */
						frDeliveryBean
								.setConsgStatus(DeliveryManifestConstants.OPEN_STATUS);
						frDeliveryBean
								.setDeliveryStatus(DeliveryManifestConstants.CONSGN_STATUS_FDM);
						frDeliveryBean.setAttemptNum(attemptNumber);
						frDeliveryBean.setAttemptDate(DateFormatterUtil
								.combineDateWithTimeHHMM(frDeliveryManifestTO
										.getPreparationDate(),
										frDeliveryManifestTO
												.getPreparationTime()));

						frDeliveryBean.setConsgWeight(fdmConsgWeight);
						destPinCode = ctbsApplicationMDBDAO.getPinCodeByIdOrCode(
								-1, frDeliveryManifestTO.getPinCode()[i]);
						frDeliveryBean.setDestPinCode(destPinCode);
						booking = deliveryManifestMDBDAO
								.getBookingDetails(conNumber);
						// Updating Weight into Booking table
						boolean isWeightOnToleracne = Boolean.FALSE;
						bookingWeight = frDeliveryManifestTO
								.getBookedWeightList()[i];
						weightOnTolarence = frDeliveryManifestTO
								.getWeightTolarence();
						isWeightOnToleracne = isWeightOnToleracne(
								fdmConsgWeight, bookingWeight,
								weightOnTolarence);
						if (isWeightOnToleracne) {
							// Calling rate calculation module
							// TO DO Rate Calculation part
						/*	if (booking != null) {
								RateCalculationInputTO inputTo = DeliveryManifestTOToDOConvertor
										.populateValuesRateCalc(booking,
												fdmConsgWeight);
								rateCalcService = rateCalcFactory
										.getCalculationServiceFor(inputTo
												.getTypeTo());
								if (rateCalcService != null) {
									try {
										outputTO = rateCalcService
												.calculateRate(inputTo);
									} catch (CGBusinessException e) {
										//e#prntstcktrce
										frDeliveryBean.setError(e.getMessage());
									}
								}
								if (outputTO != null) {
									rateAmount = outputTO.getSlabCharge();
								}
							}*/

							deliveryManifestMDBDAO.updateBookedWeight(conNumber,
									fdmConsgWeight, rateAmount, "FDM");
							// Updating the status in SAP Integration table
							deliveryManifestMDBDAO
									.updateSAPIntgConsgStatus(
											conNumber,
											CommonConstants.CONSGN_BILLING_STATUS_SAP_INTG);
						}

						// Updating Pincode into Booking if there is any change

						if (booking != null) {
							bookingPinCode = booking.getDestPinCode();
							// TO DO Rate Calculation part
							
							/*if (bookingPinCode.getPincodeId().intValue() != destPinCode
									.getPincodeId().intValue()) {
								// Calling rate calculation module
								RateCalculationInputTO inputTo = DeliveryManifestTOToDOConvertor
										.populateValuesRateCalc(booking,
												fdmConsgWeight);

								rateCalcService = rateCalcFactory
										.getCalculationServiceFor(inputTo
												.getTypeTo());
								if (rateCalcService != null) {
									try {
										outputTO = rateCalcService
												.calculateRate(inputTo);
									} catch (CGBusinessException e) {
										//e#prntstcktrce
										frDeliveryBean.setError(e.getMessage());
									}

								}

								if (outputTO != null) {
									rateAmount = outputTO.getSlabCharge();
								}
							}*/

							deliveryManifestMDBDAO.updateDestIntoBooking(
									destPinCode.getPincode(), conNumber,
									rateAmount, "FDM");
							// Updating the status in SAP Integration table
							deliveryManifestMDBDAO
									.updateSAPIntgConsgStatus(
											conNumber,
											CommonConstants.CONSGN_BILLING_STATUS_SAP_INTG);

						}

						frDeliveryBean.setConsgNumOFPieces(frDeliveryManifestTO
								.getNoOfPieces()[i]);
						OfficeDO branch = new OfficeDO();
						branch.setOfficeId(frDeliveryManifestTO.getBranchID());
						frDeliveryBean.setBranch(branch);
						FranchiseeDO franchisee = new FranchiseeDO();
						franchisee.setFranchiseeId(frDeliveryManifestTO
								.getFranchiseeID());
						frDeliveryBean.setFranchisee(franchisee);
						OfficeDO reportingOffice = new OfficeDO();
						reportingOffice.setOfficeId(frDeliveryManifestTO
								.getReportingBranchID());
						frDeliveryBean.setReportingBranch(reportingOffice);
						frDeliveryBean.setFdmNumber(fdmNum);
						if (frDeliveryManifestTO.getDeliveryIDs()[i] != null
								&& frDeliveryManifestTO.getDeliveryIDs()[i] > 0) {
							frDeliveryBean.setDeliveryId(frDeliveryManifestTO
									.getDeliveryIDs()[i]);

						} else{
							frDeliveryBean.setServerDate(DateFormatterUtil
									.getCurrentDate());
						}

						frDeliveryBean.setPreparationDate(DateFormatterUtil
								.combineDateWithTimeHHMM(frDeliveryManifestTO
										.getPreparationDate(),
										frDeliveryManifestTO
												.getPreparationTime()));

						fdmTime = frDeliveryManifestTO.getPreparationTime();

						if (rematksCount > i) {
							frDeliveryBean.setRemarks(frDeliveryManifestTO
									.getRemarksList()[i]);
						}
						prodID = frDeliveryManifestTO.getProductIDs().length;
						if (prodID > 0 && frDeliveryManifestTO.getProductIDs()[i] > 0) {
							ProductDO product = new ProductDO();
							product.setProductId(frDeliveryManifestTO
									.getProductIDs()[i]);
							frDeliveryBean.setProduct(product);
						}
						frDeliveryBean
								.setPhNum(frDeliveryManifestTO.getPhNum());
						frDeliveryBean.setDbServer(frDeliveryManifestTO
								.getDbServer());
						// For Document
						docID = frDeliveryManifestTO.getDocumentIDs()[i];
						if (docID > 0) {
							DocumentDO document = new DocumentDO();
							document.setDocumentId(docID);
							frDeliveryBean.setDocument(document);
						}
						serviceID = frDeliveryManifestTO.getServiceIDs().length;
						if (serviceID > 0 && frDeliveryManifestTO.getServiceIDs()[i] > 0 ) {
							ServiceDO service = new ServiceDO();
							service.setServiceId(frDeliveryManifestTO
									.getServiceIDs()[i]);
							frDeliveryBean.setService(service);
						}
						// PTP service
						ptpServiceCount = frDeliveryManifestTO.getPtpService().length;
						if (ptpServiceCount > 0) {
							frDeliveryBean.setPtpService(frDeliveryManifestTO
									.getPtpService()[i]);
						}
						// For Volumetric Implementaion
						lenghthCount = frDeliveryManifestTO
								.getLengthInCmsList().length;
						breadthCount = frDeliveryManifestTO
								.getBreadthInCmsList().length;
						heightCount = frDeliveryManifestTO.getHeightInCmsList().length;
						volumtericCount = frDeliveryManifestTO
								.getVolumtericWeightList().length;
						if (lenghthCount > 0) {
							frDeliveryBean.setLength(frDeliveryManifestTO
									.getLengthInCmsList()[i]);
						}
						if (breadthCount > 0) {
							frDeliveryBean.setBreadth(frDeliveryManifestTO
									.getBreadthInCmsList()[i]);
						}
						if (heightCount > 0) {
							frDeliveryBean.setHeight(frDeliveryManifestTO
									.getHeightInCmsList()[i]);
						}
						if (volumtericCount > 0) {
							frDeliveryBean
									.setVolumetricWeight(frDeliveryManifestTO
											.getVolumtericWeightList()[i]);
						}
						// Setting cutOfTime
						deliveredOffice = ctbsApplicationMDBDAO
								.getBranchByCodeOrID(
										frDeliveryManifestTO.getBranchID(),
										CommonConstants.EMPTY_STRING);
						if (deliveredOffice != null) {
							cutOffTime = deliveredOffice.getCutOffTime();
							if (StringUtils.isNotEmpty(cutOffTime)) {
								Calendar cutOfTime = Calendar.getInstance();
								Calendar frdmTime = Calendar.getInstance();
								String[] splitTime = cutOffTime.split(".");
								if (splitTime.length > 0) {
									int cutOfTimeValue = Integer
											.parseInt(splitTime[0]);
									cutOfTime.set(Calendar.HOUR_OF_DAY,
											cutOfTimeValue);
								}
								String[] fdmSplitTime = fdmTime.split(".");
								if (fdmSplitTime.length > 0) {
									int fdmTimeValue = Integer
											.parseInt(fdmSplitTime[0]);
									frdmTime.set(Calendar.HOUR_OF_DAY,
											fdmTimeValue);
								}
								if (frdmTime.after(cutOfTime)) {
									frDeliveryBean
											.setFrSelAfterClosingTime("Y");
								}
							}
						}
						// add the object to list
						frDeliveryManifestList.add(frDeliveryBean);
					}
				}
			}

		} catch (Exception e) {
			logger.error("DeliveryManifestTOToDOConvertor::franchiseeDeliveryTOToDOConvertor::Exception occured:"
					+e.getMessage());
			throw new CGBusinessException(e);
		}

		return frDeliveryManifestList;
	}

	/**
	 * Creates the to list from domain list.
	 *
	 * @param deliveryManifestList the delivery manifest list
	 * @param deliveryManifestMDBDAO the delivery manifest mdbdao
	 * @param ctbsApplicationMDBDAO the ctbs application mdbdao
	 * @return the list
	 */
	public static List<DeliveryManifestTO> createTOListFromDomainList(
			List<DeliveryDO> deliveryManifestList,
			DeliveryManifestMDBDAO deliveryManifestMDBDAO,
			CTBSApplicationMDBDAO ctbsApplicationMDBDAO) {
		List<DeliveryManifestTO> deliveryManifestListTO = new ArrayList<DeliveryManifestTO>();
		ProductDO product = null;
		DocumentDO document = null;
		ServiceDO service = null;
		DeliveryManifestBookingDO bookingDO = null;
		ConsigneeAddressDO consigneeAddress = null;
		ConsigneeDO consignee = null;
		String buildingName = "";
		String buildingBlock = "";
		String street1 = "";
		String street2 = "";
		String street3 = "";
		String areaName = "";
		String citiName = "";
		String stateName = "";
		String pinCode = "";
		String firstName = "";
		String lastName = "";
		StringBuilder consigneeAdd = null;
		StringBuilder consigneeName = null;
		String surName = "";
		PincodeDO destPinCode = null;
		String consgNumberSeries = "";
		try {
			if (deliveryManifestList.size() > 0) {
				// Converting DO to To
				for (DeliveryDO brDeliveryBean : deliveryManifestList) {
					DeliveryManifestTO deliveryManifestTO = new DeliveryManifestTO();
					deliveryManifestTO.setDeliveryId(brDeliveryBean
							.getDeliveryId());
					deliveryManifestTO.setBranchID(brDeliveryBean.getBranch()
							.getOfficeId());
					deliveryManifestTO.setBranchCode(brDeliveryBean.getBranch()
							.getOfficeCode());
					deliveryManifestTO.setBranchDesc(brDeliveryBean.getBranch()
							.getOfficeName());
					deliveryManifestTO.setEmpID(brDeliveryBean.getEmployee()
							.getEmployeeId());
					deliveryManifestTO.setEmpCode(brDeliveryBean.getEmployee()
							.getEmpCode());
					deliveryManifestTO.setEmpDesc(brDeliveryBean.getEmployee()
							.getFirstName());
					deliveryManifestTO.setConNum(brDeliveryBean.getConNum());
					// String deliveryDate =
					// DateFormatterUtil.getDDMMYYYYDateString(brDeliveryBean.getPreparationDate(),"yyyy-MM-dd HH:mm:ss");
					String deliveryDate = DateFormatterUtil
							.getDDMMYYYYDateToString(brDeliveryBean
									.getPreparationDate());
					deliveryManifestTO.setPreparationDate(deliveryDate);
					String crDate = DateFormatterUtil
							.getDDMMYYYYDateString(brDeliveryBean
									.getServerDate());
					deliveryManifestTO.setTransCrDate(crDate);
					deliveryManifestTO.setLastModifiedDate(DateFormatterUtil
							.todaySystemDate());
					String time = DateFormatterUtil
							.extractTimeFromDate(brDeliveryBean
									.getPreparationDate());
					deliveryManifestTO.setPreparationTime(time);
					deliveryManifestTO.setRemarks(brDeliveryBean.getRemarks());
					deliveryManifestTO.setPhNum(brDeliveryBean.getPhNum());
					deliveryManifestTO.setConsgWeight(brDeliveryBean
							.getConsgWeight());
					deliveryManifestTO.setConsgNumOFPieces(brDeliveryBean
							.getConsgNumOFPieces());
					deliveryManifestTO.setTotalNumOFPieces(brDeliveryBean
							.getTotalNumOFPieces());
					deliveryManifestTO.setTotalWeight(brDeliveryBean
							.getTotalWeight());
					deliveryManifestTO
							.setConsgStatus(DeliveryManifestConstants.BR_DELIVERY_TYPE);
					deliveryManifestTO.setRunSheetNum(brDeliveryBean
							.getRunSheetNum());
					product = brDeliveryBean.getProduct();
					if (product != null) {
						deliveryManifestTO.setProductID(brDeliveryBean
								.getProduct().getProductId());
						deliveryManifestTO.setProductCode(brDeliveryBean
								.getProduct().getProductType());
						deliveryManifestTO.setProductDesc(brDeliveryBean
								.getProduct().getProductName());
					}
					deliveryManifestTO.setDeliveryStatus(brDeliveryBean
							.getDeliveryStatus());
					// for Document
					document = brDeliveryBean.getDocument();
					if (document != null) {
						deliveryManifestTO.setDocumentID(document
								.getDocumentId());
					}
					// seting service
					service = brDeliveryBean.getService();
					if (service != null) {
						deliveryManifestTO.setServiceId(service.getServiceId());
					}
					// ptpService
					deliveryManifestTO.setConsgPtpService(brDeliveryBean
							.getPtpService());
					// Setting attempt details
					deliveryManifestTO.setAttemptNum(brDeliveryBean
							.getAttemptNum());
					deliveryManifestTO.setAttemptDate(deliveryDate);
					deliveryManifestTO.setAttemptTime(DateFormatterUtil
							.extractTimeFromDate(brDeliveryBean
									.getPreparationDate()));

					// set pincode
					destPinCode = brDeliveryBean.getDestPinCode();
					pinCode = destPinCode.getPincode();
					// For Volumetric weight implementation
					deliveryManifestTO.setVolumetricWeight(brDeliveryBean
							.getVolumetricWeight());
					deliveryManifestTO.setLengthInCms(brDeliveryBean
							.getLength());
					deliveryManifestTO.setBreadthInCms(brDeliveryBean
							.getBreadth());
					deliveryManifestTO.setHeightInCms(brDeliveryBean
							.getHeight());
					// Setting booking information
					bookingDO = deliveryManifestMDBDAO
							.getBookingDetails(brDeliveryBean.getConNum());
					if (bookingDO != null) {
						consigneeAdd = new StringBuilder();
						consigneeName = new StringBuilder();
						consgNumberSeries = brDeliveryBean.getConNum()
								.substring(0, 1);
						if (StringUtils.equals(consgNumberSeries,
								CommonConstants.CONSIGNMENT_D_SERIES)
								|| StringUtils.equals(consgNumberSeries,
										CommonConstants.CONSIGNMENT_E_SERIES)
								|| StringUtils.equals(consgNumberSeries,
										CommonConstants.CONSIGNMENT_V_SERIES)
								|| StringUtils.equals(consgNumberSeries,
										CommonConstants.CONSIGNMENT_W_SERIES)) {
							consignee = bookingDO.getConsignee();
							// destPinCode = bookingDO.getDestPinCode();
							// if (destPinCode != null) {
							// pinCode = destPinCode.getPincode();
							// }
							if (consignee != null) {
								consigneeAddress = ctbsApplicationMDBDAO
										.getConsigneeAddress(consignee
												.getConsigneeId());
								firstName = consignee.getFirstName();
								lastName = consignee.getLastName();
								surName = consignee.getSurName();
								consigneeName.append(firstName);
								consigneeName.append(" ");
								consigneeName.append(lastName);
								consigneeName.append(" ");
								consigneeName.append(surName);
							}

						}

						if (consigneeAddress != null) {
							buildingName = consigneeAddress.getBuildingName();
							buildingBlock = consigneeAddress.getBuildingBlock();
							street1 = consigneeAddress.getStreet1();
							street2 = consigneeAddress.getStreet2();
							street3 = consigneeAddress.getStreet3();

							consigneeAdd.append(buildingName);
							consigneeAdd.append(",");
							consigneeAdd.append(buildingBlock);
							consigneeAdd.append(",");
							consigneeAdd.append(street1);
							consigneeAdd.append(",");
							consigneeAdd.append(street2);
							consigneeAdd.append(",");
							consigneeAdd.append(street3);
							consigneeAdd.append(",");

							AreaDO area = consigneeAddress.getAreaDO();
							if (area != null) {
								CityDO city = area.getCity();
								StateDO state = city.getDistrict().getState();
								areaName = area.getAreaName();
								citiName = city.getCityName();
								stateName = state.getStateName();
								consigneeAdd.append(areaName);
								consigneeAdd.append(",");
								consigneeAdd.append(citiName);
								consigneeAdd.append(",");
								consigneeAdd.append(stateName);
							}

							consigneeAdd.append(",");
							consigneeAdd.append(pinCode);
							if (consigneeAdd.toString() != null
									&& !consigneeAdd.toString()
											.equalsIgnoreCase("null")){
								deliveryManifestTO
										.setConsigneeAddress(consigneeAdd
												.toString());
							}else {
								deliveryManifestTO.setConsigneeAddress("");
							}
						}

						if (consigneeName.toString() != null
								&& !consigneeName.toString().equalsIgnoreCase(
										"null")){
							deliveryManifestTO.setConsigneeName(consigneeName
									.toString());
						} else{
							deliveryManifestTO.setConsigneeName("");
						}

						deliveryManifestTO.setConsigneePinCode(pinCode);
						deliveryManifestTO.setBookedWeight(bookingDO
								.getBookedWeight());
					}
					deliveryManifestListTO.add(deliveryManifestTO);
				}
			}
		} catch (Exception e) {
			logger.error("DeliveryManifestTOToDOConvertor::createTOListFromDomainList::Exception occured:"
					+e.getMessage());
		}
		return deliveryManifestListTO;
	}

	/**
	 * Creates the fr delivery to from domain.
	 *
	 * @param deliveryManifestList the delivery manifest list
	 * @param deliveryManifestMDBDAO the delivery manifest mdbdao
	 * @param ctbsApplicationMDBDAO the ctbs application mdbdao
	 * @return the list
	 */
	public static List<FranchiseeDeliveryManifestTO> createFrDeliveryTOFromDomain(
			List<FranchiseDeliveryManifestDO> deliveryManifestList,
			DeliveryManifestMDBDAO deliveryManifestMDBDAO,
			CTBSApplicationMDBDAO ctbsApplicationMDBDAO) {
		List<FranchiseeDeliveryManifestTO> frDeliveryManifestTO = new ArrayList<FranchiseeDeliveryManifestTO>();
		ProductDO product = null;
		DocumentDO document = null;
		ServiceDO service = null;
		ConsigneeAddressDO consigneeAddressDO = null;
		ConsigneeDO consignee = null;
		PincodeDO destPinCode = null;
		String pinCode = "";
		PincodeDO consgPinCode = null;
		CityDO city = null;
		DistrictDO dist = null;
		try {
			if (deliveryManifestList.size() > 0) {
				// Converting DO to To
				for (FranchiseDeliveryManifestDO frDeliveryBean : deliveryManifestList) {
					StringBuilder consigneeAddress = new StringBuilder();
					FranchiseeDeliveryManifestTO deliveryManifestTO = new FranchiseeDeliveryManifestTO();
					deliveryManifestTO.setDeliveryId(frDeliveryBean
							.getDeliveryId());
					deliveryManifestTO.setBranchID(frDeliveryBean.getBranch()
							.getOfficeId());
					deliveryManifestTO.setBranchCode(frDeliveryBean.getBranch()
							.getOfficeCode());
					deliveryManifestTO.setBranchDesc(frDeliveryBean.getBranch()
							.getOfficeName());
					deliveryManifestTO.setFranchiseeID(frDeliveryBean
							.getFranchisee().getFranchiseeId());
					deliveryManifestTO.setFrCode(frDeliveryBean.getFranchisee()
							.getFranchiseeCode());
					deliveryManifestTO.setFrDesc(frDeliveryBean.getFranchisee()
							.getBusinessName());
					deliveryManifestTO.setReportingBranchID(frDeliveryBean
							.getReportingBranch().getOfficeId());
					deliveryManifestTO.setReportingBranchDesc(frDeliveryBean
							.getReportingBranch().getOfficeName());
					deliveryManifestTO.setReportingBranchCode(frDeliveryBean
							.getReportingBranch().getOfficeCode());
					product = frDeliveryBean.getProduct();
					if (product != null) {
						deliveryManifestTO.setProductID(frDeliveryBean
								.getProduct().getProductId());
						deliveryManifestTO.setProductDesc(frDeliveryBean
								.getProduct().getProductName());
						deliveryManifestTO.setProductCode(frDeliveryBean
								.getProduct().getProductType());
					}
					deliveryManifestTO.setPhNum(frDeliveryBean.getPhNum());
					String deliveryDate = DateFormatterUtil
							.getDDMMYYYYDateToString(frDeliveryBean
									.getPreparationDate());
					deliveryManifestTO.setPreparationDate(deliveryDate);
					String crDate = DateFormatterUtil
							.getDDMMYYYYDateToString(frDeliveryBean
									.getTransactionCrDate());
					deliveryManifestTO.setTransCrDate(crDate);
					deliveryManifestTO.setLastModifiedDate(DateFormatterUtil
							.todaySystemDate());
					deliveryManifestTO.setPreparationTime(DateFormatterUtil
							.extractTimeFromDate(frDeliveryBean
									.getPreparationDate()));
					deliveryManifestTO.setFdmNumber(frDeliveryBean
							.getFdmNumber());
					deliveryManifestTO.setConNum(frDeliveryBean.getConNum());
					deliveryManifestTO.setRemarks(frDeliveryBean.getRemarks());
					deliveryManifestTO.setConsgWeight(frDeliveryBean
							.getConsgWeight());
					deliveryManifestTO.setConsgNumOFPieces(frDeliveryBean
							.getConsgNumOFPieces());
					deliveryManifestTO.setConsgStatus("Prepared");
					deliveryManifestTO.setDeliType("Prepared");
					deliveryManifestTO.setTotalNumOFPieces(frDeliveryBean
							.getTotalNumOFPieces());
					deliveryManifestTO.setTotalWeight(frDeliveryBean
							.getTotalWeight());
					deliveryManifestTO.setPhNum(frDeliveryBean.getPhNum());
					deliveryManifestTO.setDeliveryStatus(frDeliveryBean
							.getDeliveryStatus());
					// for document
					document = frDeliveryBean.getDocument();
					if (document != null) {
						deliveryManifestTO.setDocumentID(document
								.getDocumentId());
					}
					// seting service
					service = frDeliveryBean.getService();
					if (service != null) {
						deliveryManifestTO.setServiceId(service.getServiceId());
					}
					// ptpService
					deliveryManifestTO.setConsgPtpService(frDeliveryBean
							.getPtpService());
					// Setting attempt details
					deliveryManifestTO.setAttemptNum(frDeliveryBean
							.getAttemptNum());
					deliveryManifestTO.setAttemptDate(deliveryDate);
					deliveryManifestTO.setAttemptTime(DateFormatterUtil
							.extractTimeFromDate(frDeliveryBean
									.getPreparationDate()));
					// For Volumetric weight implementation
					deliveryManifestTO.setVolumetricWeight(frDeliveryBean
							.getVolumetricWeight());
					deliveryManifestTO.setLengthInCms(frDeliveryBean
							.getLength());
					deliveryManifestTO.setBreadthInCms(frDeliveryBean
							.getBreadth());
					deliveryManifestTO.setHeightInCms(frDeliveryBean
							.getHeight());

					// Setting Booking info
					DeliveryManifestBookingDO bookingDO = deliveryManifestMDBDAO
							.getBookingDetails(frDeliveryBean.getConNum());
					if (bookingDO != null) {
						destPinCode = bookingDO.getDestPinCode();
						if (destPinCode != null) {
							pinCode = destPinCode.getPincode();
						}
						deliveryManifestTO.setBookedWeight(bookingDO
								.getBookedWeight());
						consignee = bookingDO.getConsignee();
						if (consignee != null) {
							consigneeAddressDO = ctbsApplicationMDBDAO
									.getConsigneeAddress(consignee
											.getConsigneeId());
						}
					}
					if (consigneeAddressDO != null) {
						AreaDO area = consigneeAddressDO.getAreaDO();
						consigneeAddress
								.append(consigneeAddressDO.getStreet1());
						consigneeAddress.append(",");
						consigneeAddress
								.append(consigneeAddressDO.getStreet2());
						consigneeAddress.append(",");
						consigneeAddress
								.append(consigneeAddressDO.getStreet3());
						consigneeAddress.append(",");
						consigneeAddress.append(consigneeAddressDO
								.getBuildingBlock());
						consigneeAddress.append(",");
						consigneeAddress.append(consigneeAddressDO
								.getBuildingName());
						if (area != null) {
							consgPinCode = area.getPincode();
							city = area.getCity();
							if (city != null) {
								consigneeAddress.append(",");
								consigneeAddress.append(city.getCityName());
								dist = city.getDistrict();
								if (dist != null) {
									consigneeAddress.append(",");
									consigneeAddress.append(city.getDistrict()
											.getState().getStateName());
								}
							}
							if (consgPinCode != null) {
								consigneeAddress.append(",");
								consigneeAddress.append(consgPinCode
										.getPincode());
							}

						}
					}
					deliveryManifestTO.setConsigneeAddress(consigneeAddress
							.toString());
					deliveryManifestTO.setConsigneePinCode(pinCode);
					// if (!(StringUtil.isEmpty(frDeliveryBean.getBranch()
					// .getPhone()))) {
					// deliveryManifestTO.setPhoneNumbers(StringUtil
					// .parseStringList(frDeliveryBean.getBranch()
					// .getPhone(), "/"));
					// }
					frDeliveryManifestTO.add(deliveryManifestTO);
				}
			}
		} catch (Exception e) {
			logger.error("DeliveryManifestTOToDOConvertor::createFrDeliveryTOFromDomain::Exception occured:"
					+e.getMessage());
		}
		return frDeliveryManifestTO;
	}

	/**
	 * Franchisee hand over to to do convertor.
	 *
	 * @param frHODeliveryTO the fr ho delivery to
	 * @return the list
	 */
	public static List<FranchiseDeliveryManifestHandOverDO> franchiseeHandOverTOToDOConvertor(
			FranchiseeDeliveryHandoverTO frHODeliveryTO) {
		List<FranchiseDeliveryManifestHandOverDO> frHODeliveryList = new ArrayList<FranchiseDeliveryManifestHandOverDO>();
		Double totalWeight = 0.0;
		int totalConsignments = 0;
		int attemptNumber = 0;
		Integer brId = 0;
		Integer frId = 0;
		try {

			if (frHODeliveryTO.getFdmNumbers().length > 0) {
				// calculating total weight and pieces
				for (int i = 0; i < frHODeliveryTO.getFdmNumbers().length; i++) {
					if (StringUtils
							.isNotEmpty(frHODeliveryTO.getFdmNumbers()[i])) {
						totalWeight = totalWeight
								+ frHODeliveryTO.getWeight()[i];
						totalConsignments = totalConsignments
								+ frHODeliveryTO.getConsignmentCount()[i];
					}
				}

				for (int i = 0; i < frHODeliveryTO.getFdmNumbers().length; i++) {
					if (StringUtils
							.isNotEmpty(frHODeliveryTO.getFdmNumbers()[i])) {
						FranchiseDeliveryManifestHandOverDO frHODeliveryBean = new FranchiseDeliveryManifestHandOverDO();
						frHODeliveryBean.setFdmNumber(frHODeliveryTO
								.getFdmNumbers()[i]);

						frHODeliveryBean.setHandOverDate(DateFormatterUtil
								.combineDateWithTimeHHMM(
										frHODeliveryTO.getHandOverDate(),
										frHODeliveryTO.getHandOverTime()));

						frHODeliveryBean
								.setDeliveryStatus(DeliveryManifestConstants.CONSGN_STATUS_BDM);
						frHODeliveryBean
								.setConsgStatus(DeliveryManifestConstants.OPEN_STATUS);
						frHODeliveryBean.setHandOverNum(frHODeliveryTO
								.getHandOverNum());
						if (frHODeliveryTO.getDeliveryIDs()[i] != null
								&& frHODeliveryTO.getDeliveryIDs()[i] > 0) {
							frHODeliveryBean.setDeliveryId(frHODeliveryTO
									.getDeliveryIDs()[i]);
						}
						frId = frHODeliveryTO.getFranchiseeID();
						if (frId != null && frId > 0) {
							FranchiseeDO frnch = new FranchiseeDO();
							frnch.setFranchiseeId(frHODeliveryTO
									.getFranchiseeID());
							frHODeliveryBean.setFranchisee(frnch);
						}
						brId = frHODeliveryTO.getBranchID();
						if (brId != null && brId > 0) {
							OfficeDO repOffice = new OfficeDO();
							repOffice.setOfficeId(frHODeliveryTO.getBranchID());
							frHODeliveryBean.setReportingBranch(repOffice);
						}

						frHODeliveryList.add(frHODeliveryBean);
					}
				}
			}
		} catch (Exception e) {
			logger.error("DeliveryManifestTOToDOConvertor::franchiseeHandOverTOToDOConvertor::Exception occured:"
					+e.getMessage());
		}
		return frHODeliveryList;
	}

	

	/**
	 * Checks if is weight on toleracne.
	 *
	 * @param weightOnConsignment the weight on consignment
	 * @param weightOnBooking the weight on booking
	 * @param weightTolerence the weight tolerence
	 * @return true, if is weight on toleracne
	 */
	private static boolean isWeightOnToleracne(Double weightOnConsignment,
			Double weightOnBooking, Double weightTolerence) {
		boolean isWeightOnToleracne = Boolean.FALSE;
		Double consgWeightAfterTolarenceFrom = 0.0;
		Double consgWeightAfterTolarenceTo = 0.0;
		try {
			consgWeightAfterTolarenceFrom = weightOnBooking - weightTolerence;
			consgWeightAfterTolarenceTo = weightOnBooking + weightTolerence;
			if (weightOnConsignment > consgWeightAfterTolarenceTo) {
				isWeightOnToleracne = Boolean.TRUE;
			}
		} catch (Exception e) {
			logger.error("DeliveryManifestTOToDOConvertor::isWeightOnToleracne::Exception occured:"
					+e.getMessage());
		}
		return isWeightOnToleracne;
	}

	/**
	 * Creates the fr hoto from domain.
	 *
	 * @param frHOManiefstList the fr ho maniefst list
	 * @return the list
	 */
	public static List<FranchiseeDeliveryHandoverTO> createFrHOTOFromDomain(
			List<FranchiseDeliveryManifestDO> frHOManiefstList) {
		List<FranchiseeDeliveryHandoverTO> frHOList = new ArrayList<FranchiseeDeliveryHandoverTO>();
		try {
			if (frHOManiefstList.size() > 0) {
				// Converting DO to To
				for (FranchiseDeliveryManifestDO frHODO : frHOManiefstList) {
					FranchiseeDeliveryHandoverTO frHOTO = new FranchiseeDeliveryHandoverTO();
					frHOTO.setDeliveryId(frHODO.getDeliveryId());
					frHOTO.setBranchID(frHODO.getBranch().getOfficeId());
					frHOTO.setBranchCode(frHODO.getBranch().getOfficeCode());
					frHOTO.setBranchDesc(frHODO.getBranch().getOfficeName());
					frHOTO.setFranchiseeID(frHODO.getFranchisee()
							.getFranchiseeId());
					frHOTO.setFrCode(frHODO.getFranchisee().getFranchiseeCode());
					frHOTO.setFrDesc(frHODO.getFranchisee().getBusinessName());
					frHOTO.setReportingBranchID(frHODO.getReportingBranch()
							.getOfficeId());
					frHOTO.setReportingBranchDesc(frHODO.getReportingBranch()
							.getOfficeName());
					frHOTO.setReportingBranchCode(frHODO.getReportingBranch()
							.getOfficeCode());
					String deliveryDate = DateFormatterUtil
							.getDDMMYYYYDateString(frHODO.getPreparationDate());
					frHOTO.setPreparationDate(deliveryDate);
					String crDate = DateFormatterUtil
							.getDDMMYYYYDateString(frHODO.getServerDate());
					frHOTO.setTransCrDate(crDate);
					frHOTO.setLastModifiedDate(DateFormatterUtil
							.todaySystemDate());
					frHOTO.setPreparationTime(DateFormatterUtil
							.extractTimeFromDate(frHODO.getPreparationDate()));
					frHOTO.setHandOverNum(frHODO.getHandOverNum());
					frHOTO.setFdmNumber(frHODO.getFdmNumber());
					frHOTO.setConsgWeight(frHODO.getConsgWeight());
					frHOTO.setConsgNumOFPieces(frHODO.getConsgNumOFPieces());
					frHOTO.setTotalNumOFPieces(frHODO.getTotalNumOFPieces());
					frHOTO.setTotalWeight(frHODO.getTotalWeight());
					frHOTO.setDeliveryStatus(frHODO.getDeliveryStatus());
					frHOList.add(frHOTO);
				}
			}
		} catch (Exception e) {
			logger.error("DeliveryManifestTOToDOConvertor::createFrHOTOFromDomain::Exception occured:"
					+e.getMessage());
		}
		return frHOList;
	}

}
