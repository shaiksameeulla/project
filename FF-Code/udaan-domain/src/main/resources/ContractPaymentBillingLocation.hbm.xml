<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE hibernate-mapping PUBLIC "-//Hibernate/Hibernate Mapping DTD 3.0//EN"
"http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd">

<hibernate-mapping>
	<class name="com.ff.domain.ratemanagement.masters.ContractPaymentBillingLocationDO" table="ff_d_contract_payment_billing_location">
		<id name="contractPaymentBillingLocationId" type="java.lang.Integer" column="CONTRACT_PAYMENT_BILLING_LOCATION_ID">
			<generator class="native" />
		</id>

        <property name="shippedToCode" column="SHIPPED_TO_CODE"/>        
        <property name="locationOperationType" column="LOCATION_OPERATION_TYPE"/>
		 
		<!-- <property name="pickupDeliveryLocationId" column="PICKUP_DELIVERY_LOCATION" type="java.lang.Integer"/> -->
		<!-- <property name="rateContractId" column="RATE_CONTRACT" type="java.lang.Integer"/> -->
		
		<property name="createdDate"  column="CREATED_DATE" type="java.util.Date"/>
		<property  name="updatedDate" column="UPDATE_DATE"	type="java.util.Date"/>    
		<property name="createdBy" column="CREATED_BY" type="java.lang.Integer"/>
		<property name="updatedBy" column="UPDATE_BY" type="java.lang.Integer"/>
		<property name="status" column="status" type="java.lang.String"/>
		
		<many-to-one name="pickupDeliveryLocation"
			class="com.ff.domain.pickup.PickupDeliveryLocationDO" lazy="false" cascade="all" fetch="join">
			<column name="PICKUP_DELIVERY_LOCATION" />
		</many-to-one>
		
		<many-to-one name="rateContractDO"
			class="com.ff.domain.ratemanagement.masters.RateContractDO" lazy="false" fetch="select">
			<column name="RATE_CONTRACT" />
		</many-to-one>
		<property name="dtToBranch" column="DT_TO_BRANCH"/>
	</class>
	
	<query name="getShippedToCodesByCustomerId">
		<![CDATA[	SELECT shippedToCode
					FROM com.ff.domain.ratemanagement.masters.ContractPaymentBillingLocationDO contractPay
					where contractPay.locationOperationType='B'
					AND contractPay.rateContractDO.rateContractId 
					IN (
						Select rateContract.rateContractId from 
						com.ff.domain.ratemanagement.masters.RateContractDO rateContract
						where rateContract.customerId=:customerId
					)
				]]>
	</query>
	
	<query name="getContractPayDtls">
		<![CDATA[
			FROM	com.ff.domain.ratemanagement.masters.ContractPaymentBillingLocationDO contractPay
			where 	contractPay.rateContractDO.rateContractId=:rateContractId
		]]>
	</query>
	<query name="updateShipToCode">
		<![CDATA[
			UPDATE	com.ff.domain.ratemanagement.masters.ContractPaymentBillingLocationDO contractPay
			SET		contractPay.shippedToCode=:shippedToCode,contractPay.updatedBy=:updatedBy,contractPay.updatedDate=:updatedDate
			WHERE	contractPay.rateContractDO.rateContractId=:rateContractId
		]]>
	</query>
	
	<query name="getContractPayBillocationDtlsByLocationId">
		<![CDATA[
			FROM	com.ff.domain.ratemanagement.masters.ContractPaymentBillingLocationDO contractPay
			WHERE 	contractPay.pickupDeliveryLocation.pickupDlvLocId=:pickupDlvLocId
		]]>	
	</query>
	<query name="getShippedToCodeByLocationId">
		<![CDATA[
			SELECT contractPay.shippedToCode
			FROM	com.ff.domain.ratemanagement.masters.ContractPaymentBillingLocationDO contractPay
			WHERE 	contractPay.pickupDeliveryLocation.pickupDlvLocId=:pickupDlvLocId
		]]>	
	</query>
	<query name="getContractCustomerListForStock">
		<![CDATA[
			select new com.ff.domain.stockmanagement.wrapper.StockCustomerWrapperDO(billingLocation.shippedToCode,customerDO.customerId,customerDO.customerCode,customerDO.businessName,customerDO.customerType)
			from com.ff.domain.ratemanagement.masters.ContractPaymentBillingLocationDO as billingLocation  
			inner join billingLocation.pickupDeliveryLocation as location
			inner join location.pickupDlvContract as pickupContract
			inner join pickupContract.customer as customerDO
			inner join pickupContract.office as office
			inner join customerDO.customerType as customerType
			where 
			 customerType.customerTypeCode IN (:customerType)
			 AND pickupContract.contractType IN (:pickupType)
			 AND office.officeId IN (:officeId)
			AND customerDO.status =:transactionStatus
			AND billingLocation.status=:transactionStatus
				 
				
		]]>	
	</query>
	
	<query name="getRhoOfficeContractCustomerListForStock">
		<![CDATA[
			select new com.ff.domain.stockmanagement.wrapper.StockCustomerWrapperDO(billingLocation.shippedToCode,customerDO.customerId,customerDO.customerCode,customerDO.businessName,customerDO.customerType)
			from com.ff.domain.ratemanagement.masters.ContractPaymentBillingLocationDO as billingLocation  
			inner join billingLocation.pickupDeliveryLocation as location
			inner join location.pickupDlvContract as pickupContract
			inner join pickupContract.customer as customerDO
			inner join pickupContract.office as office
			inner join customerDO.customerType as customerType
			where 
			 customerType.customerTypeCode IN (:customerType)
			 AND pickupContract.contractType IN (:pickupType)
			 AND (	office.officeId IN (:officeId)
				 OR office.reportingRHO IN(:officeId) )
		AND 	customerDO.status =:transactionStatus	 
				 
				
		]]>	
	</query>
	<query name="getHubOfficeContractCustomerListForStock">
		<![CDATA[
			select new com.ff.domain.stockmanagement.wrapper.StockCustomerWrapperDO(billingLocation.shippedToCode,customerDO.customerId,customerDO.customerCode,customerDO.businessName,customerDO.customerType)
			from com.ff.domain.ratemanagement.masters.ContractPaymentBillingLocationDO as billingLocation  
			inner join billingLocation.pickupDeliveryLocation as location
			inner join location.pickupDlvContract as pickupContract
			inner join pickupContract.customer as customerDO
			inner join pickupContract.office as office
			inner join customerDO.customerType as customerType
			where 
			 customerType.customerTypeCode IN (:customerType)
			 AND pickupContract.contractType IN (:pickupType)
			 AND (	office.officeId IN (:officeId)
				 OR office.reportingHUB IN(:officeId) )
		AND 	customerDO.status =:transactionStatus	 
				 
				
		]]>	
	</query>
	
	<query name="getCustomerOfficeForStockBcun">
		<![CDATA[
			select pickupContract.office.officeId
			from com.ff.domain.ratemanagement.masters.ContractPaymentBillingLocationDO as billingLocation  
			inner join billingLocation.pickupDeliveryLocation as location
			inner join location.pickupDlvContract as pickupContract
			inner join pickupContract.customer as customerDO
			where 
			 billingLocation.shippedToCode IN (:shippedToCode)
			 and
			 pickupContract.contractType='P'
			 AND
		 	customerDO.status ='A'	 
		]]>	
	</query>
	
	<query name="getCustomerByShippedToCode">
		<![CDATA[
			select pickupContract.customer
			from com.ff.domain.ratemanagement.masters.ContractPaymentBillingLocationDO as billingLocation  
			inner join billingLocation.pickupDeliveryLocation as location
			inner join location.pickupDlvContract as pickupContract
			inner join pickupContract.customer as customerDO
			where 
			 billingLocation.shippedToCode IN (:shippedToCode)
			 and
			 pickupContract.contractType='P'
			 AND
		 	customerDO.status ='A'	 
		]]>	
	</query>
	
	<query name="getShipToCodeForCustModification">
		<![CDATA[
			select billingLocation.shippedToCode
			from com.ff.domain.ratemanagement.masters.ContractPaymentBillingLocationDO as billingLocation  
			inner join billingLocation.pickupDeliveryLocation as location
			inner join location.pickupDlvContract as pickupContract
			inner join pickupContract.customer as customerDO
			inner join pickupContract.office as office
			where 
			 customerDO.customerId IN (:custId)
			 AND office.officeId IN (:officeId)
			AND customerDO.status =:transactionStatus
		]]>	
	</query>
	
	<query name="clearPickupOrDlvLocations">
		<![CDATA[
			update com.ff.domain.ratemanagement.masters.ContractPaymentBillingLocationDO as billingLocation
			set billingLocation.status = 'I' where
			billingLocation.rateContractDO.rateContractId = :rateContractId and
			billingLocation.status = 'A' 	
		]]>	
	</query>
	
	
</hibernate-mapping>