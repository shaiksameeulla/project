<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE hibernate-mapping PUBLIC "-//Hibernate/Hibernate Mapping DTD 3.0//EN"
	"http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd">
	
<hibernate-mapping>
	<class name="com.ff.domain.ratemanagement.operations.ba.BAMaterialRateDetailsDO" 
		table="ff_d_ba_material_rate_details">
		<id name="baMaterialRateDtlsId" type="java.lang.Long">
			<column name="BA_MATERIAL_RATE_DTLS_ID" />
			<generator class="native" />
		</id>
		<property name="ratePerUnit" column="RATE_PER_UNIT" />
		<property name="rowNumber" column="ROW_NUMBER" />
		
		<!-- many-to-one relationships START -->
		<many-to-one name="baMaterialRateConfigDO" 
			class="com.ff.domain.ratemanagement.operations.ba.BAMaterialRateConfigDO" lazy="false" fetch="join">
			<column name="BA_MATERIAL_RATE_ID" />
		</many-to-one>
		<many-to-one name="itemDO" 
			class="com.ff.domain.stockmanagement.masters.ItemDO" lazy="false" fetch="join">
			<column name="ITEM_ID" />
		</many-to-one>
		<!-- many-to-one relationships END -->
		
		<!-- Common Attributes START -->
		<property name="transactionCreateDate" column="TRANS_CREATED_DATE_TIME" update="false" />
		<property name="transactionModifiedDate" column="TRANS_MODIFIED_DATE_TIME" />
		<!-- Common Attributes END -->
		<property name="dtToBranch" column="DT_TO_BRANCH" /> 
		
	</class>
	
	
	
	<sql-query name="getBaRateConfigByMaterial">
	<return alias="bamaterial0_" class="com.ff.domain.ratemanagement.operations.ba.BAMaterialRateDetailsDO"/>
	
	<![CDATA[
	
	select 
	*
 from
        ff_d_ba_material_rate_details bamaterial0_ 
    inner join
        ff_d_item itemdo1_ 
            on bamaterial0_.ITEM_ID=itemdo1_.ITEM_ID 
    inner join
        ff_d_ba_material_rate_config bamaterial2_ 
            on bamaterial0_.BA_MATERIAL_RATE_ID=bamaterial2_.BA_MATERIAL_RATE_ID 
    where
        itemdo1_.ITEM_ID=:itemId
        and ((
            :loggedInDate between bamaterial2_.VALID_FROM_DATE and bamaterial2_.VALID_TO_DATE)
            or (
                bamaterial2_.VALID_TO_DATE is null     and :loggedInDate >=bamaterial2_.VALID_FROM_DATE
        ))
    order by
        bamaterial0_.TRANS_MODIFIED_DATE_TIME desc
	]]>
	</sql-query>
	<!-- <query name="getBaRateConfigByMaterial">
	<![CDATA[
		select rateDtls from com.ff.domain.ratemanagement.operations.ba.BAMaterialRateDetailsDO as rateDtls
		inner join rateDtls.itemDO as material
		inner join  rateDtls.baMaterialRateConfigDO as rateHeader
		
		where material.itemId =:itemId
		AND 
		((rateHeader.validToDate IS NULL AND :loggedInDate>=rateHeader.validFromDate)
		OR
		(:loggedInDate BETWEEN rateHeader.validFromDate AND rateHeader.validToDate))
		
		order by rateDtls.transactionModifiedDate desc
	]]>
</query> -->
</hibernate-mapping>