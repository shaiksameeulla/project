/**
 * 
 */
package com.ff.web.drs.manualdrs.action;

import java.util.HashMap;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import net.sf.json.JSONArray;
import net.sf.json.JSONObject;

import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.action.ActionMessage;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.capgemini.lbs.framework.constants.FrameworkConstants;
import com.capgemini.lbs.framework.exception.CGBusinessException;
import com.capgemini.lbs.framework.exception.CGSystemException;
import com.capgemini.lbs.framework.utils.CGCollectionUtils;
import com.capgemini.lbs.framework.utils.CGJasonConverter;
import com.capgemini.lbs.framework.utils.ExceptionUtil;
import com.capgemini.lbs.framework.utils.StringUtil;
import com.ff.to.drs.AbstractDeliveryTO;
import com.ff.to.drs.ManualDrsTO;
import com.ff.universe.drs.constant.UniversalDeliveryContants;
import com.ff.web.drs.common.action.AbstractDeliveryAction;
import com.ff.web.drs.common.constants.DrsCommonConstants;
import com.ff.web.drs.common.constants.DrsConstants;
import com.ff.web.drs.common.form.ManualDrsForm;
import com.ff.web.util.UdaanWebErrorConstants;

/**
 * @author mohammes
 *
 */
public class UpdateManualDrsAction extends AbstractDeliveryAction {
	
	/** The Constant LOGGER. */
	private final static Logger LOGGER = LoggerFactory
			.getLogger(UpdateManualDrsAction.class);
	
	
	public ActionForward viewUpdateDrsPage(final ActionMapping mapping, final ActionForm form,
			final HttpServletRequest request, final HttpServletResponse response) {
		LOGGER.debug("UpdateManualDrsAction::viewUpdateDrsPage ..START");
		final ManualDrsTO drsTo = new ManualDrsTO();
		initilaizeForm(drsTo,request);
		setGlobalDetails(request, (AbstractDeliveryTO)drsTo);
		setAutoGeneratedMDrsNumber(drsTo, request);
		((ManualDrsForm) form).setTo(drsTo);
		LOGGER.debug("UpdateManualDrsAction::viewUpdateDrsPage ..END");
		return mapping.findForward(DrsConstants.SUCCESS_FORWARD);
	}
	/**
	 * @param drsTo
	 */
	private void initilaizeForm(final ManualDrsTO drsTo,final HttpServletRequest request) {
		/** defining DRS type i.e Preparation-P */
		drsTo.setDrsType(DrsConstants.DRS_TYPE_UPDATE);
		drsTo.setDrsScreenCode(DrsConstants.MANUAL_TMF_DRS_SCREEN_CODE);
		/** defining DRS's Consignment type i.e PPX */
		drsTo.setAllowedSeries(getConfigParamValue(request, UniversalDeliveryContants.MANUAL_DRS_CONFIG_PARAMS_SERIES));
		setHeaderStandardTypeDetails(request);
		manualDrsDropDown(request);
		prepareConsignmentTypeDetails(request);
		drsTo.setIsNormalCnoteAllowed(DrsConstants.FLAG_YES);
		drsTo.setModeOfPaymentCheque(DrsConstants.MODE_OF_PAYMENT_CHEQUE);
		drsTo.setModeOfPaymentCash(DrsConstants.MODE_OF_PAYMENT_CASH);
		
	}

	public ActionForward findDrsNumberForUpdate(final ActionMapping mapping, final ActionForm form,
			final HttpServletRequest request, final HttpServletResponse response) {
		LOGGER.debug("UpdateManualDrsAction::findDrsNumberForUpdate ..START");
		ActionMessage actionMessage=null;
		final ManualDrsForm drsForm = (ManualDrsForm)form;
		 ManualDrsTO drsTo =(ManualDrsTO) drsForm.getTo();
		initilaizeForm(drsTo,request);
		
		final String drsNumber=request.getParameter(DrsCommonConstants.REQ_PARAM_DRS_NUMEBR);
		if(!StringUtil.isStringEmpty(drsNumber)){
			setGlobalDetails(request, (AbstractDeliveryTO)drsTo);
			drsTo.setDrsNumber(drsNumber);
		}
		manualDrsService = getManualDrsService();
		try {
			drsTo = manualDrsService.findDrsByDrsNumberForUpdate(drsTo);
			//check any warnings/Business Exceptions
			final boolean errorStatus = ExceptionUtil.checkError(drsTo);
			if(errorStatus) {
				//if so extract them and propagate to screen
				ExceptionUtil.prepareActionMessage(drsTo, request);
				saveActionMessage(request);
			}

		} catch (CGBusinessException e) {
			LOGGER.error("UpdateCodLcDrsAction::findDrsNumberForUpdate ..CGBusinessException :",e);
			
			drsTo= new ManualDrsTO();
			getBusinessError(request, e);
		} catch (CGSystemException e) {
			LOGGER.error("UpdateManualDrsAction::findDrsNumberForUpdate ..CGSystemException :",e);
			drsTo = new ManualDrsTO();
			getSystemException(request, e);
		}catch (Exception e) {
			LOGGER.error("UpdateManualDrsAction::findDrsNumberForUpdate ..Exception :",e);
			drsTo = new ManualDrsTO();
			getGenericException(request, e);
		}finally{
			prepareActionMessage(request, actionMessage);
			setGlobalDetails(request, (AbstractDeliveryTO)drsTo);
			setGridDropdownDetails(request);
			drsTo.setAllowedSeries(getConfigParamValue(request, UniversalDeliveryContants.MANUAL_DRS_CONFIG_PARAMS_SERIES));
		}
		((ManualDrsForm) form).setTo(drsTo);
		LOGGER.debug("UpdateManualDrsAction::findDrsNumberForUpdate ..END");
		return mapping.findForward(DrsConstants.SUCCESS_FORWARD);
	}
	/**
	 * @param request
	 */
	private void setGridDropdownDetails(final HttpServletRequest request) {
		setHeaderStandardTypeDetails(request);
		setGridStandardTypeDetails(request);
		setRelationDtls(request);
		setIdProofDtls(request);
		setModeOfPaymentDtls(request);
	}
	
	/**
	 * Ajax get grid dropdown details for manual drs.
	 *
	 * @param mapping the mapping
	 * @param form the form
	 * @param request the request
	 * @param response the response
	 */
	public void ajaxGetGridDropdownDetailsForManualDRS(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			{
		java.io.PrintWriter out=null;
		
		deliveryCommonService = getCommonServiceForDelivery();
		String jsonResult=FrameworkConstants.EMPTY_STRING;
		JSONObject jsonObject= null;
		try {
			out=response.getWriter();
			response.setContentType(FrameworkConstants.MIME_TYPE_TEXT_JAVA_SCRIPT);
			jsonObject= new JSONObject();
			Map<String, String> deliveryType = prepareDeliverytypeDetails(request);
			if(!CGCollectionUtils.isEmpty(deliveryType)){
				Map<String, String> deliveryTypeDup =new HashMap<>(deliveryType);
				deliveryTypeDup.remove(UniversalDeliveryContants.DELIVERY_TYPE_NO_DELIVERY);
				JSONArray dlvType= prepareJsonArray(deliveryTypeDup);
				jsonObject.put("DRS_TYPE",dlvType);
			}
			
			Map<String, String> drsSealSig = prepareDrsSealSignDropdownDtls(request);
			if(!CGCollectionUtils.isEmpty(drsSealSig)){
				JSONArray drsSeal= prepareJsonArray(drsSealSig);
				jsonObject.put("DRS_SEAL",drsSeal);
			}
			Map<String, String> modeOfPaymnt = prepareModeOfPayment(request);
			if(!CGCollectionUtils.isEmpty(modeOfPaymnt)){
				JSONArray payment= prepareJsonArray(modeOfPaymnt);
				jsonObject.put("MODE_OF_PAYMENT",payment);
			}
			
			Map<Integer, String> relations = getRelationDropDown(request);
			if(!CGCollectionUtils.isEmpty(relations)){
				JSONArray payment= prepareJsonArrayForMaster(relations);
				jsonObject.put("DRS_RELATION_TYPE",payment);
			}
			
			Map<Integer, String> idProof = getIdentityProofDropDown(request);
			if(!CGCollectionUtils.isEmpty(idProof)){
				JSONArray payment= prepareJsonArrayForMaster(idProof);
				jsonObject.put("DRS_ID_PROOF_TYPE",payment);
			}
			jsonResult= jsonObject.toString();
		}catch (Exception e) {
			LOGGER.error("UpdateManualDrsAction:: ajaxGetGridDropdownDetailsForManualDRS", e);
			String exception=getGenericExceptionMessage(request, e);
			jsonResult = prepareCommonException(DrsConstants.ERROR_FLAG,exception);
		}
		finally {
			out.print(jsonResult);
			out.flush();
			out.close();
		}

	}
	
	

	/**
	 * Update drs.
	 *
	 * @param mapping the mapping
	 * @param form the form
	 * @param request the request
	 * @param response the response
	 */
	public void updateDeliveredDrs(final ActionMapping mapping, final ActionForm form,
			final HttpServletRequest request, final HttpServletResponse response) {
		LOGGER.debug("UpdateManualDrsAction::updateDrs ..START");
		Boolean result=Boolean.FALSE;

		final ManualDrsForm drsForm = (ManualDrsForm)form;
		 ManualDrsTO drsTo =(ManualDrsTO) drsForm.getTo();
		manualDrsService = getManualDrsService();
		String jsonResult=FrameworkConstants.EMPTY_STRING;
		java.io.PrintWriter out=null;
		try {
			serializer = CGJasonConverter.getJsonObject();
			out=response.getWriter();
			response.setContentType(FrameworkConstants.MIME_TYPE_TEXT_JAVA_SCRIPT);

			result = manualDrsService.saveDeliveredDrsConsg(drsTo);
			if(!result){
				jsonResult = getMessageFromErrorBundle(request,UdaanWebErrorConstants.DRS_INFO_NOT_SAVED,null);
			}else{
				performTwoWayWrite(drsTo);
				drsTo.setSuccessMessage(getMessageFromErrorBundle(request,UdaanWebErrorConstants.DRS_INFO_SAVED,new String[]{drsTo.getDrsNumber(),DrsCommonConstants.DRS_MODIFIED}));
				jsonResult = serializer.toJSON(drsTo).toString();
			}
		} catch (CGBusinessException e) {
			LOGGER.error("UpdateManualDrsAction::updateDeliveredDrs ..CGBusinessException :",e);
			jsonResult= prepareCommonException(DrsConstants.ERROR_FLAG,getBusinessErrorFromWrapper(request,e));
		}catch (CGSystemException e) {
			LOGGER.error("UpdateManualDrsAction::updateDeliveredDrs ..CGSystemException :",e);
			jsonResult= prepareCommonException(DrsConstants.ERROR_FLAG,getSystemExceptionMessage(request,e));
		}catch (Exception e) {
			LOGGER.error("UpdateManualDrsAction::updateDeliveredDrs ..Exception :",e);
			//String exception=ExceptionUtil.getExceptionStackTrace(e);
			jsonResult = prepareCommonException(DrsConstants.ERROR_FLAG,getGenericExceptionMessage(request, e));
		}
		finally {
			out.print(jsonResult);
			out.flush();
			out.close();
		}
		LOGGER.debug("UpdateManualDrsAction::updateDeliveredDrs ..END");
	}
	
}
